/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/transaction/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize Transaction
         * @description Create a new transaction
         */
        post: operations["transaction_initialize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/verify/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Transaction
         * @description Verify a previously initiated transaction using it's reference
         */
        get: operations["transaction_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions
         * @description List transactions that has occurred on your integration
         */
        get: operations["transaction_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Transaction
         * @description Fetch a transaction to get its details
         */
        get: operations["transaction_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/timeline/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Transaction Timeline
         * @description Get the details about the lifecycle of a transaction from initiation to completion
         */
        get: operations["transaction_timeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/totals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Totals
         * @description Get the total amount of all transactions
         */
        get: operations["transaction_totals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Transactions */
        get: operations["transaction_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/charge_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Charge Authorization */
        post: operations["transaction_chargeAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/partial_debit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Partial Debit */
        post: operations["transaction_partialDebit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Transaction Event */
        get: operations["transaction_event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Transaction Session */
        get: operations["transaction_session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List/Search Splits */
        get: operations["split_list"];
        put?: never;
        /** Create Split */
        post: operations["split_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Split */
        get: operations["split_fetch"];
        /** Update Split */
        put: operations["split_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}/subaccount/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Subaccount to Split */
        post: operations["split_addSubaccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}/subaccount/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Subaccount from split */
        post: operations["split_removeSubaccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/{id}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Event
         * @description Send an event from your application to the Paystack Terminal
         */
        post: operations["terminal_sendEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/{terminal_id}/event/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Event Status
         * @description Check the status of an event sent to the Terminal
         */
        get: operations["terminal_fetchEventStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/{terminal_id}/presence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Terminal Status
         * @description Check the availiability of a Terminal before sending an event to it
         */
        get: operations["terminal_fetchTerminalStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Terminals
         * @description List the Terminals available on your integration
         */
        get: operations["terminal_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/{terminal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terminal_id: string;
            };
            cookie?: never;
        };
        /**
         * Fetch Terminal
         * @description Get the details of a Terminal
         */
        get: operations["terminal_fetch"];
        /** Update Terminal */
        put: operations["terminal_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/commission_device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Commission Terminal
         * @description Activate your debug device by linking it to your integration
         */
        post: operations["terminal_commission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terminal/decommission_device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Decommission Terminal
         * @description Unlink your debug device from your integration
         */
        post: operations["terminal_decommission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Customers
         * @description List customers on your integration
         */
        get: operations["customer_list"];
        put?: never;
        /** Create Customer */
        post: operations["customer_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Customer */
        get: operations["customer_fetch"];
        /** Update Customer */
        put: operations["customer_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/set_risk_action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * White/blacklist Customer
         * @description Set customer's risk action by whitelisting or blacklisting the customer
         */
        post: operations["customer_riskAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/deactivate_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate Authorization
         * @description Deactivate a customer's card
         */
        post: operations["customer_deactivateAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{code}/identification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Customer
         * @description Validate a customer's identity
         */
        post: operations["customer_validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Dedicated Accounts */
        get: operations["dedicatedAccount_list"];
        put?: never;
        /** Create Dedicated Account */
        post: operations["dedicatedAccount_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Dedicated Account */
        post: operations["dedicatedAccount_assign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        /** Fetch Dedicated Account */
        get: operations["dedicatedAccount_fetch"];
        put?: never;
        post?: never;
        /** Deactivate Dedicated Account */
        delete: operations["dedicatedAccount_deactivate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/requery": {
        parameters: {
            query?: {
                /** @description Virtual account number to requery */
                account_number?: string;
                /** @description The bank's slug in lowercase, without spaces e.g. `wema-bank` */
                provider_slug?: string;
                /** @description The day the transfer was made in `YYYY-MM-DD` format */
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Requery Dedicated Account */
        get: operations["dedicatedAccount_requery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/split": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Split Dedicated Account Transaction */
        post: operations["dedicatedAccount_addSplit"];
        /** Remove Split from Dedicated Account */
        delete: operations["dedicatedAccount_removeSplit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/available_providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Bank Providers */
        get: operations["dedicatedAccount_availableProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apple-pay/domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Domains
         * @description Lists all registered domains on your integration
         */
        get: operations["applePay_listDomain"];
        put?: never;
        /**
         * Register Domain
         * @description Register a top-level domain or subdomain for your Apple Pay integration.
         */
        post: operations["applePay_registerDomain"];
        /**
         * Unregister Domain
         * @description Unregister a top-level domain or subdomain previously used for your Apple Pay integration.
         */
        delete: operations["applePay_unregisterDomain"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subaccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Subaccounts */
        get: operations["subaccount_list"];
        put?: never;
        /** Create Subaccount */
        post: operations["subaccount_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subaccount/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Subaccount */
        get: operations["subaccount_fetch"];
        /** Update Subaccount */
        put: operations["subaccount_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Plans */
        get: operations["plan_list"];
        put?: never;
        /** Create Plan */
        post: operations["plan_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plan/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Plan */
        get: operations["plan_fetch"];
        /** Update Plan */
        put: operations["plan_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Subscriptions */
        get: operations["subscription_list"];
        put?: never;
        /** Create Subscription */
        post: operations["subscription_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Subscription */
        get: operations["subscription_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable Subscription */
        post: operations["subscription_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable Subscription */
        post: operations["subscription_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}/manage/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Update Subscription Link */
        get: operations["subscription_manageLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}/manage/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Update Subscription Link */
        post: operations["subscription_manageEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Products */
        get: operations["product_list"];
        put?: never;
        /** Create Product */
        post: operations["product_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Product */
        get: operations["product_fetch"];
        /** Update product */
        put: operations["product_update"];
        post?: never;
        /** Delete Product */
        delete: operations["product_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Storefronts */
        get: operations["storefront_list"];
        put?: never;
        /** Create Storefront */
        post: operations["storefront_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Storefront */
        get: operations["storefront_fetch"];
        /** Update Storefront */
        put: operations["storefront_update"];
        post?: never;
        /** Delete Storefront */
        delete: operations["storefront_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/verify/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        /** Verify Storefront Slug */
        get: operations["storefront_verifySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/{id}/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Storefront Orders
         * @description Fetch all orders in your Storefront
         */
        get: operations["storefront_fetchOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/{id}/product": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** List Products in Storefront */
        get: operations["storefront_listProducts"];
        put?: never;
        /** Add Products to Storefront */
        post: operations["storefront_addProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Publish Storefront */
        post: operations["storefront_publish"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/{id}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicate Storefront */
        post: operations["storefront_duplicate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Orders */
        get: operations["order_list"];
        put?: never;
        /** Create Order */
        post: operations["order_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Order */
        get: operations["order_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Products Order */
        get: operations["order_fetchProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{code}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Validate pay for me order */
        get: operations["order_validatePayForMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Pages */
        get: operations["page_list"];
        put?: never;
        /** Create Page */
        post: operations["page_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Page */
        get: operations["page_fetch"];
        /** Update Page */
        put: operations["page_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/check_slug_availability/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        /** Check Slug Availability */
        get: operations["page_checkSlugAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/{id}/product": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Products */
        post: operations["page_addProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Payment Request */
        get: operations["paymentRequest_list"];
        put?: never;
        /** Create Payment Request */
        post: operations["paymentRequest_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Payment Request */
        get: operations["paymentRequest_fetch"];
        /** Update Payment Request */
        put: operations["paymentRequest_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/verify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Verify Payment Request */
        get: operations["paymentRequest_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/notify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Notification */
        post: operations["paymentRequest_notify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/totals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Request Total */
        get: operations["paymentRequest_totals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/finalize/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Payment Request */
        post: operations["paymentRequest_finalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/archive/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Archive Payment Request */
        post: operations["paymentRequest_archive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Settlements */
        get: operations["settlements_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement/{id}/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Settlement Transactions */
        get: operations["settlements_transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transfer Recipients */
        get: operations["transferrecipient_list"];
        put?: never;
        /** Create Transfer Recipient */
        post: operations["transferrecipient_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Create Transfer Recipient */
        post: operations["transferrecipient_bulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Transfer recipient */
        get: operations["transferrecipient_fetch"];
        /** Update Transfer recipient */
        put: operations["transferrecipient_update"];
        post?: never;
        /** Delete Transfer Recipient */
        delete: operations["transferrecipient_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transfers */
        get: operations["transfer_list"];
        put?: never;
        /** Initiate Transfer */
        post: operations["transfer_initiate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/finalize_transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Transfer */
        post: operations["transfer_finalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate Bulk Transfer */
        post: operations["transfer_bulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Transfer */
        get: operations["transfer_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/verify/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify Transfer */
        get: operations["transfer_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Transfers */
        get: operations["transfer_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/resend_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend OTP for Transfer */
        post: operations["transfer_resendOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/disable_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable OTP requirement for Transfers */
        post: operations["transfer_disableOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/disable_otp_finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Disabling of OTP requirement for Transfers */
        post: operations["transfer_disableOtpFinalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/enable_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable OTP requirement for Transfers */
        post: operations["transfer_enableOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Balance
         * @description You can only transfer from what you have
         */
        get: operations["balance_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balance/ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Balance Ledger */
        get: operations["balance_ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Charge */
        post: operations["charge_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit PIN */
        post: operations["charge_submitPin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit OTP */
        post: operations["charge_submitOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Phone */
        post: operations["charge_submitPhone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_birthday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Birthday */
        post: operations["charge_submitBirthday"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Address */
        post: operations["charge_submitAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check pending charge */
        get: operations["charge_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Bulk Charge Batches */
        get: operations["bulkCharge_list"];
        put?: never;
        /** Initiate Bulk Charge */
        post: operations["bulkCharge_initiate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Bulk Charge Batch */
        get: operations["bulkCharge_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/{code}/charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Charges in a Batch */
        get: operations["bulkCharge_charges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/pause/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pause Bulk Charge Batch */
        get: operations["bulkCharge_pause"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/resume/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resume Bulk Charge Batch */
        get: operations["bulkCharge_resume"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/payment_session_timeout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Payment Session Timeout */
        get: operations["integration_fetchPaymentSessionTimeout"];
        /** Update Payment Session Timeout */
        put: operations["integration_updatePaymentSessionTimeout"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Refunds */
        get: operations["refund_list"];
        put?: never;
        /** Create Refund */
        post: operations["refund_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refund/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Refund */
        get: operations["refund_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Disputes */
        get: operations["dispute_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Dispute */
        get: operations["dispute_fetch"];
        /** Update Dispute */
        put: operations["dispute_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/upload_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upload URL */
        get: operations["dispute_uploadUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Disputes */
        get: operations["dispute_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transaction Disputes */
        get: operations["dispute_transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resolve a Dispute */
        put: operations["dispute_resolve"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Evidence */
        post: operations["dispute_evidence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Banks */
        get: operations["bank_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve Account Number */
        get: operations["bank_resolveAccountNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Bank Account */
        post: operations["bank_validateAccountNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decision/bin/{bin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve Card BIN */
        get: operations["miscellaneous_resolveCardBin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Countries */
        get: operations["miscellaneous_listCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address_verification/states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List States (AVS) */
        get: operations["miscellaneous_avs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description List of all support currencies
         * @example GHS
         * @enum {string}
         */
        Currency: "GHS" | "KES" | "NGN" | "ZAR" | "USD";
        SplitSubaccounts: {
            /** @description Subaccount code of the customer or partner */
            subaccount?: string;
            /** @description The percentage or flat quota of the customer or partner */
            share?: string;
        };
        /** @description Split configuration for transactions
         *      */
        SplitCreate: {
            /** @description Name of the transaction split */
            name: string;
            /**
             * @description The type of transaction split you want to create.
             * @enum {string}
             */
            type: "percentage" | "flat";
            /** @description A list of object containing subaccount code and number of shares */
            subaccounts: components["schemas"]["SplitSubaccounts"][];
            /**
             * @description The transaction currency
             * @enum {string}
             */
            currency: "NGN" | "GHS" | "ZAR" | "USD";
            /**
             * @description This allows you specify how the transaction charge should be processed
             * @enum {string}
             */
            bearer_type?: "subaccount" | "account" | "all-proportional" | "all";
            /** @description This is the subaccount code of the customer or partner that would bear the transaction charge if you specified subaccount as the bearer type */
            bearer_subaccount?: string;
        };
        /**
         * @description Initialize a transaction
         * @example {
         *       "email": "test@demo.com",
         *       "amount": 10000
         *     }
         */
        TransactionInitialize: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in smallest denomination of the currency. For example if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
             *      */
            amount: number;
            currency?: components["schemas"]["Currency"];
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
            /** @description An array of payment channels to control what channels you want to make available to the user to make a payment with */
            channels?: ("card" | "bank" | "ussd" | "qr" | "eft" | "mobile_money" | "bank_transfer")[];
            /** @description Fully qualified url, e.g. https://example.com/ to redirect your customers to after a successful payment. Use this to override the callback url provided on the dashboard for this transaction
             *      */
            callback_url?: string;
            /** @description If transaction is to create a subscription to a predefined plan, provide plan code here.
             *     This would invalidate the value provided in amount
             *      */
            plan?: string;
            /** @description Number of times to charge customer during subscription to plan */
            invoice_limit?: number;
            /** @description The split code of the transaction split */
            split_code?: string;
            split?: components["schemas"]["SplitCreate"];
            /** @description The code for the subaccount that owns the payment */
            subaccount?: string;
            /** @description A flat fee to charge the subaccount for a transaction.
             *     This overrides the split percentage set when the subaccount was created
             *      */
            transaction_charge?: string;
            /**
             * @description The bearer of the transaction charge
             * @enum {string}
             */
            bearer?: "account" | "subaccount";
            /** @description Used to replace the email address shown on the Checkout */
            label?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        TransactionInitializeResponse: {
            status: boolean;
            message: string;
            data: {
                authorization_url: string;
                access_code: string;
                reference: string;
            };
        };
        /** @description Extra details to help with a resolution of the error */
        ErrorMeta: {
            /** @description A summarised solution for the error */
            nextStep?: string;
        };
        /**
         * @description Error response returned when a transaction is initialized with incorrect parameters
         *
         * @example {
         *       "status": false,
         *       "message": "Duplicate Transaction Reference",
         *       "meta": {
         *         "nextStep": "Try and create the Transaction or Charge with a new reference"
         *       },
         *       "type": "validation_error",
         *       "code": "duplicate_reference",
         *       "errorCodeMappingNotFound": false
         *     }
         */
        TransactionInitializeBadRequestModel: {
            /** @description An indicator for the state of the request */
            status?: boolean;
            /** @description A short description of the error */
            message?: string;
            meta?: components["schemas"]["ErrorMeta"];
            /**
             * @description A tag to indicate the type of the error
             * @enum {string}
             */
            type?: "validation_error" | "processor_error" | "api_error";
            /** @description The error code */
            code?: string;
            /** @description An indicator for error mapping for the request */
            errorCodeMappingNotFound?: boolean;
        };
        Error: {
            /** @description An indicator for the state of the request */
            status?: boolean;
            /** @description A short description of the error */
            message?: string;
            meta?: components["schemas"]["ErrorMeta"];
            /** @description A tag to indicate the type of the error */
            type?: string;
            /**
             * @description The error code
             * @enum {string}
             */
            code?: "validation_error" | "processor_error" | "api_error";
            /** @description An indicator for error mapping for the request */
            errorCodeMappingNotFound?: boolean;
        };
        TransactionVerifyResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: string | null;
                amount: number;
                message: string | null;
                gateway_response: string;
                paid_at: string | null;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: string | Record<string, never>;
                log: unknown;
                fees: number | null;
                fees_split: unknown;
                authorization: {
                    authorization_code?: string;
                    bin?: unknown;
                    last4?: string;
                    exp_month?: string;
                    exp_year?: string;
                    channel?: string;
                    card_type?: string;
                    bank?: string;
                    country_code?: string;
                    brand?: string;
                    reusable?: boolean;
                    signature?: string;
                    account_name?: unknown;
                    receiver_bank_account_number?: unknown;
                    receiver_bank?: unknown;
                };
                customer: {
                    id: number;
                    first_name: string | null;
                    last_name: string | null;
                    email: string;
                    customer_code: string;
                    phone: string | null;
                    metadata: unknown;
                    risk_action: string;
                    international_format_phone: string | null;
                };
                plan: unknown;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string | null;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
                transaction_date: string;
                plan_object: Record<string, never>;
                subaccount: Record<string, never>;
            };
        };
        TransactionListResponseArray: {
            id: number;
            domain: string;
            status: string;
            reference: string;
            amount: number;
            message: unknown;
            gateway_response: string;
            paid_at: string | null;
            created_at: string;
            channel: string;
            currency: string;
            ip_address: string | null;
            metadata: Record<string, never> | null;
            log: unknown;
            fees: number | null;
            fees_split: number | null;
            customer: {
                id: number;
                first_name: string | null;
                last_name: string | null;
                email: string;
                phone: string | null;
                metadata: Record<string, never> | null;
                customer_code: string;
                risk_action: string;
            };
            authorization: {
                authorization_code: string;
                bin: string;
                last4: string;
                exp_month: string;
                exp_year: string;
                channel: string;
                card_type: string;
                bank: string;
                country_code: string;
                brand: string;
                reusable: boolean;
                signature: string;
                account_name: unknown;
            };
            plan: Record<string, never>;
            split: Record<string, never>;
            subaccount: Record<string, never>;
            order_id: unknown;
            paidAt: string;
            createdAt: string;
            requested_amount: number;
            source: {
                source: string;
                type: string;
                identifier: unknown;
                entry_point: string;
            } | null;
            connect: Record<string, never> | null;
            pos_transaction_data: unknown;
        };
        TransactionListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["TransactionListResponseArray"][];
            meta: {
                total: number;
                total_volume: number;
                skipped: number;
                perPage: string | number;
                page: number;
                pageCount: number;
            };
        };
        MetadataCustomFieldsArray: {
            value: string;
            display_name: string;
            variable_name: string;
        };
        TransactionFetchResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: unknown;
                amount: number;
                message: unknown;
                gateway_response: string;
                helpdesk_link: unknown;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number;
                fees_split: unknown;
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                    receiver_bank_account_number: unknown;
                    receiver_bank: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                plan: Record<string, never>;
                subaccount: Record<string, never>;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: {
                    type: string;
                    source: string;
                    identifier: unknown;
                };
                fees_breakdown: unknown;
                connect: unknown;
            };
        };
        TransactionTimelineResponse: {
            status: boolean;
            message: string;
            data: Record<string, never>;
        };
        TransactionTotalVolumeByCurrencyArray: {
            currency: string;
            amount: number;
        };
        TransactionPendingTransfersByCurrencyArray: {
            currency: string;
            amount: number;
        };
        TransactionTotalsResponse: {
            status: boolean;
            message: string;
            data: {
                total_transactions: number;
                total_volume: number;
                total_volume_by_currency: components["schemas"]["TransactionTotalVolumeByCurrencyArray"][];
                pending_transfers: number;
                pending_transfers_by_currency: components["schemas"]["TransactionPendingTransfersByCurrencyArray"][];
            };
        };
        TransactionExportResponse: {
            status: boolean;
            message: string;
            data: {
                path: string;
                expiresAt: string;
            };
        };
        /** @example {
         *       "email": "jb@email.com",
         *       "amount": 30000,
         *       "authorization_code": "AUTH_df1l5ehnym"
         *     } */
        TransactionChargeAuthorization: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount in the lower denomination of your currency */
            amount: number;
            /** @description Valid authorization code to charge */
            authorization_code: string;
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
            currency?: components["schemas"]["Currency"];
            /** @description The split code of the transaction split */
            split_code?: string;
            /** @description The code for the subaccount that owns the payment */
            subaccount?: string;
            /** @description A flat fee to charge the subaccount for a transaction.
             *     This overrides the split percentage set when the subaccount was created */
            transaction_charge?: string;
            /**
             * @description The bearer of the transaction charge
             * @enum {string}
             */
            bearer?: "account" | "subaccount";
            /** @description Stringified JSON object of custom data */
            metadata?: string;
            /** @description If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. */
            queue?: boolean;
        };
        TransactionChargeResponse: {
            status: boolean;
            message: string;
            data: {
                status: string;
                amount: number;
                currency: string;
                transaction_date: string;
                reference: string;
                domain: string;
                redirect_url: string | null;
                metadata: Record<string, never>;
                gateway_response: string;
                message: string | null;
                channel: string;
                fees: number | null;
                authorization: {
                    authorization_code: string | null;
                    bin: string | null;
                    last4: string | null;
                    exp_month: string;
                    exp_year: string;
                    channel: string | null;
                    card_type: string | null;
                    bank: string | null;
                    country_code: string | null;
                    brand: string | null;
                    reusable: boolean;
                    signature: string | null;
                };
                customer: {
                    first_name: string | null;
                    last_name: string | null;
                    email: string;
                    customer_code: string;
                    phone: string | null;
                    risk_action: string;
                };
                url?: string;
            };
        };
        /** @example {
         *       "email": "tap@email.com",
         *       "amount": 40510,
         *       "authorization_code": "AUTH_df1l5ehnym",
         *       "currency": "ZAR"
         *     } */
        TransactionPartialDebit: {
            /** @description Customer's email address */
            email: string;
            /**
             * Format: int64
             * @description Specified in the lowest denomination of your currency
             */
            amount: number;
            /** @description Valid authorization code to charge */
            authorization_code: string;
            currency: components["schemas"]["Currency"];
            /** @description Minimum amount to charge */
            at_least?: string;
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
        };
        TransactionPartialDebitResponse: {
            status: boolean;
            message: string;
            data: {
                amount: number;
                currency: string;
                transaction_date: string;
                status: string;
                reference: string;
                domain: string;
                metadata: string;
                gateway_response: string;
                message: unknown;
                channel: string;
                ip_address: unknown;
                log: unknown;
                fees: number;
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                };
                customer: {
                    id: number;
                    first_name: string | null;
                    last_name: string | null;
                    email: string;
                    customer_code: string;
                    phone: string | null;
                    metadata: Record<string, never> | null;
                    risk_action: string;
                    international_format_phone: string | null;
                };
                plan: number;
                requested_amount: number;
                id: number;
            };
        };
        Response: {
            status?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        SplitSubaccountsArray: {
            subaccount: {
                id: number;
                subaccount_code: string;
                business_name: string;
                description: string;
                primary_contact_name: string;
                primary_contact_email: string;
                primary_contact_phone: string;
                metadata: string;
                settlement_bank: string;
                currency: string;
                account_number: string;
            };
            share: number;
        };
        SplitListResponseArray: {
            id: number;
            name: string;
            type: string;
            currency: string;
            integration: number;
            domain: string;
            split_code: string;
            active: boolean;
            bearer_type: string;
            bearer_subaccount: number;
            createdAt: string;
            updatedAt: string;
            is_dynamic: boolean;
            subaccounts: components["schemas"]["SplitSubaccountsArray"][];
            total_subaccounts: number;
        };
        SplitListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["SplitListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        SplitCreateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                name: string;
                type: string;
                currency: string;
                integration: number;
                domain: string;
                split_code: string;
                active: boolean;
                bearer_type: string;
                bearer_subaccount: number;
                createdAt: string;
                updatedAt: string;
                is_dynamic: boolean;
                subaccounts: components["schemas"]["SplitSubaccountsArray"][];
                total_subaccounts: number;
            };
        };
        SplitFetchResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                name: string;
                type: string;
                currency: string;
                integration: number;
                domain: string;
                split_code: string;
                active: boolean;
                bearer_type: string;
                bearer_subaccount: number;
                createdAt: string;
                updatedAt: string;
                is_dynamic: boolean;
                subaccounts: components["schemas"]["SplitSubaccountsArray"][];
                total_subaccounts: number;
            };
        };
        SplitUpdate: {
            /** @description Name of the transaction split */
            name?: string;
            /** @description Toggle status of split. When true, the split is active, else it's inactive */
            active?: boolean;
            /**
             * @description This allows you specify how the transaction charge should be processed
             * @enum {string}
             */
            bearer_type?: "subaccount" | "account" | "all-proportional" | "all";
            /** @description This is the subaccount code of the customer or partner that would bear the transaction charge if you specified subaccount as the bearer type */
            bearer_subaccount?: string;
        };
        SplitUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                name: string;
                type: string;
                currency: string;
                integration: number;
                domain: string;
                split_code: string;
                active: boolean;
                bearer_type: string;
                bearer_subaccount: number;
                createdAt: string;
                updatedAt: string;
                is_dynamic: boolean;
                subaccounts: components["schemas"]["SplitSubaccountsArray"][];
                total_subaccounts: number;
            };
        };
        SplitAddUpdateSubaccountResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                name: string;
                type: string;
                currency: string;
                integration: number;
                domain: string;
                split_code: string;
                active: boolean;
                bearer_type: string;
                bearer_subaccount: number;
                createdAt: string;
                updatedAt: string;
                is_dynamic: boolean;
                subaccounts: components["schemas"]["SplitSubaccountsArray"][];
                total_subaccounts: number;
            };
        };
        SplitRemoveSubaccountResponse: {
            status: boolean;
            message: string;
        };
        /**
         * @description The parameters needed to perform the specified action
         * @example {
         *       "id": 7895939,
         *       "reference": "4634337895939"
         *     }
         */
        TerminalSendEventData: {
            /**
             * Format: int64
             * @description The invoice or transaction  ID you want to push to the Terminal
             */
            id?: number;
            /** @description The offline_reference from the Payment Request response */
            reference?: string;
        };
        TerminalSendEvent: {
            /**
             * @description The type of event to push
             * @enum {string}
             */
            type?: "invoice" | "transaction";
            /**
             * @description The action the Terminal needs to perform. For the invoice type, the action can either be process or view.
             *     For the transaction type, the action can either be process or print.
             *
             * @enum {string}
             */
            action?: "process" | "view" | "print";
            data?: components["schemas"]["TerminalSendEventData"];
        };
        TerminalGetStatusResponse: {
            status: boolean;
            message: string;
            data: {
                online: boolean;
                available: boolean;
            };
        };
        TerminalListsResponseArray: {
            id: number;
            serial_number: string | null;
            device_make: string | null;
            terminal_id: string;
            integration: number;
            domain: string;
            name: string | null;
            address: string | null;
            status: string;
        };
        TerminalListsResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["TerminalListsResponseArray"][];
            meta: {
                next: unknown[] | null;
                previous: unknown[] | null;
                perPage: number;
            };
        };
        TerminalGetResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                serial_number: string;
                device_make: string | null;
                terminal_id: string;
                integration: number;
                domain: string;
                name: string | null;
                address: string | null;
                status: string;
                split_code: string | null;
            };
        };
        /**
         * @description Model for updating a Terminal details
         * @example {
         *       "name": "Oreos",
         *       "address": "Somewhere on earth"
         *     }
         */
        TerminalUpate: {
            /** @description The new name for the Terminal */
            name?: string;
            /** @description The new address for the Terminal */
            address?: string;
        };
        TerminalUpdateResponse: {
            status: boolean;
            message: string;
        };
        /**
         * @description Model for activating and deactivating a debug Terminal
         * @example {
         *       "serial_number": "1111150412230003899"
         *     }
         */
        TerminalActivationToggle: {
            /** @description Device Serial Number */
            serial_number: string;
        };
        TerminalCommissionDeviceResponse: {
            status: boolean;
            message: string;
        };
        TerminalDecommissionDeviceResponse: {
            status: boolean;
            message: string;
        };
        CustomerListResponseArray: {
            integration: number;
            first_name: string | null;
            last_name: string | null;
            email: string;
            phone: string | null;
            metadata: Record<string, never> | null;
            domain: string;
            customer_code: string;
            risk_action: string;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        CustomerListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["CustomerListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: string | number;
                page: number;
                pageCount: number;
            };
        };
        CustomerCreate: {
            /** @description Customer's email address */
            email: string;
            /** @description Customer's first name */
            first_name?: string;
            /** @description Customer's last name */
            last_name?: string;
            /** @description Customer's phone number */
            phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        CustomerCreateResponse: {
            status: boolean;
            message: string;
            data: {
                transactions: unknown[];
                subscriptions: unknown[];
                authorizations: unknown[];
                email: string;
                first_name: string;
                last_name: string;
                phone: string;
                integration: number;
                domain: string;
                metadata: {
                    calling_code?: string;
                };
                customer_code: string;
                risk_action: string;
                id: number;
                createdAt: string;
                updatedAt: string;
                identified: boolean;
                identifications: unknown;
            };
        };
        CustomerFetchResponse: {
            status: boolean;
            message: string;
            data: {
                transactions: unknown[];
                subscriptions: unknown[];
                authorizations: unknown[];
                first_name: string;
                last_name: string;
                email: string;
                phone: string;
                metadata: {
                    calling_code?: string;
                };
                domain: string;
                customer_code: string;
                risk_action: string;
                id: number;
                integration: number;
                createdAt: string;
                updatedAt: string;
                created_at: string;
                updated_at: string;
                total_transactions: number;
                total_transaction_value: unknown[];
                dedicated_account: unknown;
                dedicated_accounts: unknown[] | null;
                identified: boolean;
                identifications: unknown;
            };
        };
        CustomerUpdate: {
            /** @description Customer's first name */
            first_name?: string;
            /** @description Customer's last name */
            last_name?: string;
            /** @description Customer's phone number */
            phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        CustomerUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                first_name: string;
                last_name: string;
                email: string;
                phone: string;
                metadata: Record<string, never>;
                domain: string;
                customer_code: string;
                risk_action: string;
                id: number;
                integration: number;
                createdAt: string;
                updatedAt: string;
                identified: boolean;
                identifications: unknown;
            };
        };
        CustomerRiskAction: {
            /** @description Customer's code, or email address */
            customer: string;
            /** @description One of the possible risk actions [ default, allow, deny ]. allow to whitelist.
             *     deny to blacklist. Customers start with a default risk action.
             *      */
            risk_action?: string;
        };
        CustomerWhitelistBlacklistResponse: {
            status: boolean;
            message: string;
            data: {
                transactions: unknown[];
                subscriptions: unknown[];
                authorizations: unknown[];
                first_name: string;
                last_name: string;
                email: string;
                phone: string;
                metadata: Record<string, never>;
                domain: string;
                customer_code: string;
                risk_action: string;
                id: number;
                integration: number;
                createdAt: string;
                updatedAt: string;
                identified: boolean;
                identifications: unknown;
            };
        };
        CustomerDeactivateAuthorization: {
            /** @description Authorization code to be deactivated */
            authorization_code: string;
        };
        CustomerDeactivateAuthorizationResponse: {
            status: boolean;
            message: string;
        };
        CustomerValidate: {
            /** @description Customer's first name */
            first_name: string;
            /** @description Customer's middle name */
            middle_name?: string;
            /** @description Customer's last name */
            last_name: string;
            /** @description Predefined types of identification. */
            type: string;
            /** @description Customer's identification number. Required if type is bvn */
            value?: string;
            /** @description Two-letter country code of identification issuer */
            country: string;
            /** @description Customer's Bank Verification Number */
            bvn: string;
            /** @description You can get the list of bank codes by calling the List Banks endpoint (https://api.paystack.co/bank). */
            bank_code: string;
            /** @description Customer's bank account number. */
            account_number: string;
        };
        CustomerValidateResponse: {
            status: boolean;
            message: string;
        };
        DedicatedNubanFetchResponse: {
            status: boolean;
            message: string;
            data: {
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string | null;
                };
                bank: {
                    name: string;
                    id: number;
                    slug: string;
                };
                id: number;
                account_name: string;
                account_number: string;
                created_at: string;
                updated_at: string;
                currency: string;
                split_config: unknown;
                active: boolean;
                assigned: boolean;
            };
        };
        DedicatedVirtualAccountCreate: {
            /** @description Customer ID or code */
            customer: string;
            /** @description The bank slug for preferred bank. To get a list of available banks, use the List Providers endpoint */
            preferred_bank?: string;
            /** @description Subaccount code of the account you want to split the transaction with */
            subaccount?: string;
            /** @description Split code consisting of the lists of accounts you want to split the transaction with */
            split_code?: string;
        };
        DedicatedNubanCreateResponse: {
            status: boolean;
            message: string;
            data: {
                bank: {
                    name: string;
                    id: number;
                    slug: string;
                };
                account_name: string;
                account_number: string;
                assigned: boolean;
                currency: string;
                metadata: unknown;
                active: boolean;
                id: number;
                created_at: string;
                updated_at: string;
                assignment: {
                    integration: number;
                    assignee_id: number;
                    assignee_type: string;
                    expired: boolean;
                    account_type: string;
                    assigned_at: string;
                    expired_at: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string | null;
                };
            };
        };
        DedicatedVirtualAccountAssign: {
            /** @description Customer's email address */
            email: string;
            /** @description Customer's first name */
            first_name: string;
            /** @description Customer's last name */
            last_name: string;
            /** @description Customer's phone name */
            phone: string;
            /** @description The bank slug for preferred bank. To get a list of available banks,
             *     use the List Banks endpoint, passing `pay_with_bank_transfer=true` query parameter
             *      */
            preferred_bank: string;
            /** @description Currently accepts NG only */
            country: string;
            /** @description Customer's account number */
            account_number?: string;
            /** @description Customer's Bank Verification Number */
            bvn?: string;
            /** @description Customer's bank code */
            bank_code?: string;
            /** @description Subaccount code of the account you want to split the transaction with */
            subaccount?: string;
            /** @description Split code consisting of the lists of accounts you want to split the transaction with */
            split_code?: string;
        };
        DedicatedNubanDeactivateResponse: {
            status: boolean;
            message: string;
            data: {
                bank: {
                    name: string;
                    id: number;
                    slug: string;
                };
                account_name: string;
                account_number: string;
                assigned: boolean;
                currency: string;
                metadata: unknown;
                active: boolean;
                id: number;
                created_at: string;
                updated_at: string;
                assignment: {
                    assignee_id: number;
                    assignee_type: string;
                    assigned_at: string;
                    integration: number;
                    account_type: string;
                };
            };
        };
        DedicatedVirtualAccountSplit: {
            /** @description Valid Dedicated virtual account */
            account_number: string;
            /** @description Subaccount code of the account you want to split the transaction with */
            subaccount?: string;
            /** @description Split code consisting of the lists of accounts you want to split the transaction with */
            split_code?: string;
        };
        /** @example {
         *       "domainName": "example.com"
         *     } */
        ApplePayParam: {
            /** @description The domain or subdomain for your application */
            domainName: string;
        };
        /** @example {
         *       "status": true,
         *       "message": "Domain successfully registered on Apple Pay"
         *     } */
        ApplePayCreateOkModel: {
            /** @description An indicator */
            status?: boolean;
            /** @description A short description of the response */
            message?: string;
        };
        SubaccountListResponseArray: {
            id: number;
            subaccount_code: string;
            business_name: string;
            description: string;
            primary_contact_name: string;
            primary_contact_email: string;
            primary_contact_phone: string;
            metadata: string;
            percentage_charge: number;
            settlement_bank: string;
            bank_id: number;
            account_number: string;
            currency: string;
            active: number;
        };
        SubaccountListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["SubaccountListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        SubaccountCreate: {
            /** @description Name of business for subaccount */
            business_name: string;
            /** @description Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint. */
            settlement_bank: string;
            /** @description Bank account number */
            account_number: string;
            /**
             * Format: float
             * @description Customer's phone number
             */
            percentage_charge: number;
            /** @description A description for this subaccount */
            description?: string;
            /** @description A contact email for the subaccount */
            primary_contact_email?: string;
            /** @description The name of the contact person for this subaccount */
            primary_contact_name?: string;
            /** @description A phone number to call for this subaccount */
            primary_contact_phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        SubaccountCreateResponse: {
            status: boolean;
            message: string;
            data: {
                business_name: string;
                account_name?: string | null;
                description: string;
                primary_contact_name: string;
                primary_contact_email: string;
                primary_contact_phone: string;
                metadata: string;
                account_number: string;
                percentage_charge: number;
                settlement_bank: string;
                currency: string;
                bank: number;
                integration: number;
                domain: string;
                product: string;
                managed_by_integration: number;
                subaccount_code: string;
                is_verified: boolean;
                settlement_schedule: string;
                active: boolean;
                migrate: boolean;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        SubaccountFetchResponse: {
            status: boolean;
            message: string;
            data: {
                integration: number;
                account_name?: string | null;
                bank: number;
                managed_by_integration: number;
                domain: string;
                subaccount_code: string;
                business_name: string;
                description: string;
                primary_contact_name: string;
                primary_contact_email: string;
                primary_contact_phone: string;
                metadata: string;
                percentage_charge: number;
                is_verified: boolean;
                settlement_bank: string;
                account_number: string;
                settlement_schedule: string;
                active: boolean;
                migrate: boolean;
                currency: string;
                product: string;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        SubaccountUpdate: {
            /** @description Name of business for subaccount */
            business_name?: string;
            /** @description Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint. */
            settlement_bank?: string;
            /** @description Bank account number */
            account_number?: string;
            /** @description Activate or deactivate a subaccount */
            active?: boolean;
            /**
             * Format: float
             * @description Customer's phone number
             */
            percentage_charge?: number;
            /** @description A description for this subaccount */
            description?: string;
            /** @description A contact email for the subaccount */
            primary_contact_email?: string;
            /** @description The name of the contact person for this subaccount */
            primary_contact_name?: string;
            /** @description A phone number to call for this subaccount */
            primary_contact_phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        SubaccountUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                domain: string;
                subaccount_code: string;
                account_name?: string | null;
                business_name: string;
                description: string;
                primary_contact_name: string;
                primary_contact_email: string;
                primary_contact_phone: string;
                metadata: string;
                percentage_charge: number;
                is_verified: boolean;
                settlement_bank: string;
                account_number: string;
                settlement_schedule: string;
                active: boolean;
                migrate: boolean;
                currency: string;
                product: string;
                id: number;
                integration: number;
                bank: number;
                managed_by_integration: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        PlanListResponseArray: {
            subscriptions: unknown[];
            pages: unknown[];
            domain: string;
            name: string;
            plan_code: string;
            description: unknown;
            amount: number;
            interval: string;
            invoice_limit: number;
            send_invoices: boolean;
            send_sms: boolean;
            hosted_page: boolean;
            hosted_page_url: unknown;
            hosted_page_summary: unknown;
            currency: string;
            migrate: boolean;
            is_deleted: boolean;
            is_archived: boolean;
            id: number;
            integration: number;
            createdAt: string;
            updatedAt: string;
            total_subscriptions: number;
            active_subscriptions: number;
            total_subscriptions_revenue: number;
        };
        PlanListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["PlanListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        PlanCreate: {
            /** @description Name of plan */
            name: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description Interval in words. Valid intervals are daily, weekly, monthly,biannually, annually */
            interval: string;
            /** @description A description for this plan */
            description?: string;
            /** @description Set to false if you don't want invoices to be sent to your customers */
            send_invoices?: boolean;
            /** @description Set to false if you don't want text messages to be sent to your customers */
            send_sms?: boolean;
            /** @description Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Number of invoices to raise during subscription to this plan.
             *     Can be overridden by specifying an invoice_limit while subscribing. */
            invoice_limit?: number;
        };
        PlanCreateResponse: {
            status: boolean;
            message: string;
            data: {
                currency: string;
                name: string;
                amount: number;
                interval: string;
                integration: number;
                domain: string;
                plan_code: string;
                invoice_limit: number;
                send_invoices: boolean;
                send_sms: boolean;
                hosted_page: boolean;
                migrate: boolean;
                is_archived: boolean;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        PlanFetchResponse: {
            status: boolean;
            message: string;
            data: {
                subscriptions: unknown[];
                pages: unknown[];
                domain: string;
                name: string;
                plan_code: string;
                description: unknown;
                amount: number;
                interval: string;
                invoice_limit: number;
                send_invoices: boolean;
                send_sms: boolean;
                hosted_page: boolean;
                hosted_page_url: unknown;
                hosted_page_summary: unknown;
                currency: string;
                migrate: boolean;
                is_deleted: boolean;
                is_archived: boolean;
                id: number;
                integration: number;
                createdAt: string;
                updatedAt: string;
                pages_count: number;
                subscribers_count: number;
                subscriptions_count: number;
                active_subscriptions_count: number | null;
                total_revenue: number;
                subscribers: unknown[];
            };
        };
        PlanUpdate: {
            /** @description Name of plan */
            name?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /** @description Interval in words. Valid intervals are daily, weekly, monthly,biannually, annually */
            interval?: string;
            /** @description A description for this plan */
            description?: boolean;
            /** @description Set to false if you don't want invoices to be sent to your customers */
            send_invoices?: boolean;
            /** @description Set to false if you don't want text messages to be sent to your customers */
            send_sms?: boolean;
            /** @description Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Number of invoices to raise during subscription to this plan.
             *     Can be overridden by specifying an invoice_limit while subscribing. */
            invoice_limit?: number;
        };
        PlanUpdateResponse: {
            status: boolean;
            message: string;
        };
        SubscriptionListResponseArray: {
            id: number;
            domain: string;
            status: string;
            start: number;
            quantity: number;
            subscription_code: string;
            email_token: string;
            amount: number;
            cron_expression: string | null;
            next_payment_date: string | null;
            open_invoice: unknown;
            createdAt: string;
            integration: number;
            plan: {
                id: number;
                domain: string;
                name: string;
                plan_code: string;
                description: unknown;
                amount: number;
                interval: string;
                send_invoices: boolean;
                send_sms: boolean;
                currency: string;
                integration: number;
                createdAt: string;
                updatedAt: string;
            };
            authorization: {
                authorization_code: string;
                bin: string | null;
                last4: string;
                exp_month: string;
                exp_year: string;
                channel: string;
                card_type: string | null;
                bank: string;
                country_code: string;
                brand: string;
                reusable: number;
                signature: string | null;
                account_name: unknown;
            };
            customer: {
                id: number;
                first_name: string;
                last_name: string;
                email: string;
                customer_code: string;
                phone: string | null;
                metadata: string;
                risk_action: string;
                international_format_phone: string;
            };
            invoice_limit: number;
            split_code: unknown;
            payments_count: number;
            most_recent_invoice: unknown;
        };
        SubscriptionListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["SubscriptionListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        SubscriptionCreate: {
            /** @description Customer's email address or customer code */
            customer: string;
            /** @description Plan code */
            plan: string;
            /** @description If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here.
             *     If this is not supplied, the customer's most recent authorization would be used */
            authorization?: string;
            /**
             * Format: date-time
             * @description Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00
             */
            start_date?: string;
        };
        SubscriptionCreateResponse: {
            status: boolean;
            message: string;
            data: {
                customer: number;
                plan: number;
                integration: number;
                domain: string;
                start: number;
                status: string;
                quantity: number;
                amount: number;
                authorization: number;
                invoice_limit: number;
                split_code: unknown;
                subscription_code: string;
                email_token: string;
                id: number;
                cancelledAt: unknown;
                createdAt: string;
                updatedAt: string;
                cron_expression: string;
                next_payment_date: string;
            };
        };
        SubscriptionFetchResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                subscription_code: string;
                email_token: string;
                amount: number;
                cron_expression: string;
                next_payment_date: string;
                open_invoice: unknown;
                createdAt: string;
                cancelledAt: unknown;
                integration: number;
                plan: {
                    id: number;
                    name: string;
                    plan_code: string;
                    description: unknown;
                    amount: number;
                    interval: string;
                    send_invoices: boolean;
                    send_sms: boolean;
                    currency: string;
                };
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                invoices: unknown[];
                invoices_history: unknown[];
                invoice_limit: number;
                split_code: unknown;
                most_recent_invoice: unknown;
                payments_count: number;
            };
        };
        SubscriptionToggle: {
            /** @description Subscription code */
            code: string;
            /** @description Email token */
            token: string;
        };
        SubscriptionDisableResponse: {
            status: boolean;
            message: string;
        };
        ProductListsResponseArray: {
            id: number;
            name: string;
            description: string;
            product_code: string;
            slug: string;
            currency: string;
            price: number;
            quantity: number;
            quantity_sold: number;
            active: boolean;
            domain: string;
            type: string;
            in_stock: boolean;
            unlimited: boolean;
            metadata: {
                background_color: string;
            };
            files: unknown[];
            success_message: unknown;
            redirect_url: unknown;
            split_code: unknown;
            notification_emails: unknown;
            minimum_orderable: number;
            maximum_orderable: unknown;
            createdAt: string;
            updatedAt: string;
            digital_assets: unknown[];
            variant_options: unknown[];
            is_shippable: boolean;
            shipping_fields: {
                delivery_note: string;
                shipping_address: string;
                shipping_fees: unknown[];
            };
            integration: number;
            low_stock_alert: number;
        };
        ProductListsResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["ProductListsResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: string;
                page: number;
                pageCount: number;
            };
        };
        ProductCreate: {
            /** @description Name of product */
            name: string;
            /** @description The description of the product */
            description: string;
            /** @description Price should be in kobo if currency is NGN, pesewas, if currency is GHS,
             *     and cents, if currency is ZAR
             *      */
            price: number;
            /** @description Currency in which price is set. Allowed values are: NGN, GHS, ZAR or USD
             *      */
            currency: string;
            /** @description Set to true if the product has unlimited stock. Leave as false if the
             *     product has limited stock
             *      */
            unlimited?: boolean;
            /** @description Number of products in stock. Use if limited is true */
            quantity?: number;
            /** @description The split code if sharing the transaction with partners */
            split_code?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        ProductCreateResponse: {
            status: boolean;
            message: string;
            data: {
                variants_options: unknown[];
                variants: unknown[];
                name: string;
                description: string;
                currency: string;
                price: number;
                quantity: number;
                type: string;
                is_shippable: boolean;
                unlimited: boolean;
                files: unknown[];
                shipping_fields: {
                    delivery_note: string;
                    shipping_address: string;
                    shipping_fees: unknown[];
                };
                integration: number;
                domain: string;
                metadata: {
                    background_color: string;
                };
                slug: string;
                product_code: string;
                quantity_sold: number;
                active: boolean;
                deleted_at: unknown;
                in_stock: boolean;
                minimum_orderable: number;
                maximum_orderable: number | null;
                redirect_url?: string | null;
                low_stock_alert: boolean;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        ProductFetchResponse: {
            status: boolean;
            message: string;
            data: {
                digital_assets: unknown[];
                integration: number;
                name: string;
                description: string;
                product_code: string;
                price: number;
                currency: string;
                quantity: number;
                quantity_sold: unknown;
                type: string;
                files: unknown[];
                file_path: unknown;
                is_shippable: boolean;
                shipping_fields: {
                    delivery_note: string;
                    shipping_address: string;
                    shipping_fees: unknown[];
                };
                unlimited: boolean;
                domain: string;
                active: boolean;
                features: unknown;
                in_stock: boolean;
                metadata: {
                    background_color: string;
                };
                slug: string;
                success_message: unknown;
                redirect_url: unknown;
                split_code: unknown;
                notification_emails: unknown;
                minimum_orderable: number;
                maximum_orderable: unknown;
                low_stock_alert: boolean;
                stock_threshold: unknown;
                expires_in: unknown;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        ProductUpdate: {
            /** @description Name of product */
            name?: string;
            /** @description The description of the product */
            description?: string;
            /** @description Price should be in kobo if currency is NGN, pesewas, if currency is GHS,
             *     and cents, if currency is ZAR
             *      */
            price?: number;
            /** @description Currency in which price is set. Allowed values are: NGN, GHS, ZAR or USD
             *      */
            currency?: string;
            /** @description Set to true if the product has unlimited stock. Leave as false if the
             *     product has limited stock
             *      */
            unlimited?: boolean;
            /** @description Number of products in stock. Use if limited is true */
            quantity?: number;
            /** @description The split code if sharing the transaction with partners */
            split_code?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        ProductUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                name: string;
                description: string;
                product_code: string;
                price: number;
                currency: string;
                quantity: number;
                quantity_sold: number;
                type: string;
                files: unknown[];
                file_path: unknown;
                is_shippable: boolean;
                shipping_fields: {
                    delivery_note: string;
                    shipping_address: string;
                    shipping_fees: unknown[];
                };
                unlimited: boolean;
                domain: string;
                active: boolean;
                features: unknown;
                in_stock: boolean;
                metadata: {
                    background_color: string;
                };
                slug: string;
                success_message: unknown;
                redirect_url: unknown;
                split_code: unknown;
                notification_emails: unknown;
                minimum_orderable: number;
                maximum_orderable: unknown;
                low_stock_alert: boolean;
                stock_threshold: unknown;
                expires_in: unknown;
                id: number;
                integration: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        ProductDeleteResponse: {
            status: boolean;
            message: string;
        };
        StorefrontListResponseArray: {
            id: number;
            name: string;
            slug: string;
            orders_count: number;
            status: string;
            revenue: unknown;
            currency: string;
            products: unknown[];
            contacts: unknown[];
            social_media: unknown[];
            shipping_fees: unknown[];
        };
        StorefrontListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["StorefrontListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        StorefrontCreate: {
            /** @description Name of the storefront */
            name: string;
            /** @description A unique identifier to access your store. Once the storefront is created, it can be accessed from
             *     https://paystack.shop/your-slug
             *      */
            slug: string;
            /** @description Currency for prices of products in your storefront. Allowed values are: `NGN`, `GHS`, `KES`, `ZAR` or `USD`
             *      */
            currency: string;
            /** @description The description of the storefront */
            description?: string;
        };
        StorefrontContactsArray: {
            value: string;
            id: number;
            type_name: unknown;
            type: number;
        };
        StorefrontCreateResponse: {
            status: boolean;
            message: string;
            data: {
                social_media: unknown[];
                contacts: components["schemas"]["StorefrontContactsArray"][];
                name: string;
                slug: string;
                currency: string;
                welcome_message: unknown;
                success_message: unknown;
                redirect_url: unknown;
                description: unknown;
                delivery_note: string;
                background_color: string;
                status: string;
                shippable: boolean;
                integration: number;
                domain: string;
                digital_product_expiry: unknown;
                metadata?: Record<string, never> | null;
                id: number;
                createdAt: string;
                updatedAt: string;
                products: unknown[];
                shipping_fees: unknown[];
            };
        };
        StorefrontFetchResponse: {
            status: boolean;
            message: string;
            data: {
                social_media: unknown[];
                contacts: components["schemas"]["StorefrontContactsArray"][];
                name: string;
                slug: string;
                currency: string;
                welcome_message: unknown;
                success_message: unknown;
                redirect_url: unknown;
                description: unknown;
                delivery_note: string;
                background_color: string;
                status: string;
                shippable: boolean;
                integration: number;
                domain: string;
                digital_product_expiry: unknown;
                metadata?: Record<string, never> | null;
                id: number;
                createdAt: string;
                updatedAt: string;
                products: unknown[];
                shipping_fees: unknown[];
            };
            meta: {
                product_count: number;
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        StorefrontUpdate: {
            /** @description Name of the storefront */
            name?: string;
            /** @description A unique identifier to access your store. Once the storefront is created, it can be accessed from
             *     https://paystack.shop/your-slug
             *      */
            slug?: string;
            /** @description The description of the storefront */
            description?: string;
        };
        StorefrontUpdateResponse: {
            status: boolean;
            message: string;
        };
        StorefrontDeleteResponse: {
            status: boolean;
            message: string;
        };
        StorefrontAddProducts: {
            /** @description An array of product IDs */
            products: number[];
        };
        OrderItemsArray: {
            order_item_id: number;
            orderId: number;
            type: string;
            item: number;
            current_total_items_price: number;
            files: string;
            order: number;
            amount: number;
            quantity: number;
            createdAt: string;
            name: string;
            product_level_type: string;
            product_id: number;
            product_success_message: unknown;
            product_redirect_url: unknown;
            "IFNULL(p1.expires_in, p2.expires_in)": unknown;
            product_quantity_sold: number;
            product_notification_emails: unknown;
            "IFNULL(p1.metadata, p2.metadata)": string;
            storefront_redirect_url: unknown;
            storefront_success_message: unknown;
        };
        OrderListResponseArray: {
            id: number;
            order_code: string;
            integration: number;
            domain: string;
            currency: string;
            amount: number;
            transaction: number;
            page: unknown;
            customer: number;
            customer_name: string;
            status: string;
            shipping_address: unknown;
            metadata: string;
            created_at: string;
            updated_at: string;
            email: string;
            paid_at: string;
            shipping: unknown;
            shipping_fees: number;
            refunded: boolean;
            is_viewed: boolean;
            refunded_amount: unknown;
            discount_amount: unknown;
            discounts: unknown;
            items: components["schemas"]["OrderItemsArray"][];
            fully_refunded: boolean;
        };
        OrderListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["OrderListResponseArray"][];
            meta: {
                total: number;
                revenue: Record<string, never>;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        /** @description The collection of items that make up the order */
        OrderItems: {
            /** @description The product ID of the item */
            item: string;
            /** @description The type of the item. `product` is currently the acceptable value */
            type: string;
            /** @description The number of items to get */
            quantity: number;
            /** @description The cost of the item */
            amount: number;
        };
        /** @description The shipping details of the order */
        OrderShipping: {
            /** @description The address of for the delivery */
            street_line: string;
            /** @description The city of the delivery address */
            city: string;
            /** @description The state of the delivery address */
            state: string;
            /** @description The country of the delivery address */
            country: string;
            /** @description The cost of delivery */
            shipping_fee: number;
            /** @description Extra details to be aware of for the delivery */
            delivery_note?: string;
        };
        OrderCreate: {
            /** @description The email of the customer placing the order */
            email: string;
            /** @description The customer's first name */
            first_name: string;
            /** @description The customer's last name */
            last_name: string;
            /** @description The customer's mobile number */
            phone: string;
            /** @description Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD */
            currency: string;
            items: components["schemas"]["OrderItems"][];
            shipping: components["schemas"]["OrderShipping"];
            /** @description A flag to indicate if the order is for someone else
             *      */
            is_gift?: boolean;
            /** @description A flag to indicate if the someone else should pay for the order
             *      */
            pay_for_me?: boolean;
        };
        OrderCreateResponse: {
            status: boolean;
            message: string;
            data: {
                discounts: unknown[];
                currency: string;
                shipping_address: unknown;
                integration: number;
                domain: string;
                email: string;
                customer: number;
                amount: number;
                pay_for_me: boolean;
                shipping: {
                    customer: number;
                    integration: number;
                    domain: string;
                    fees: number;
                    delivery_note: unknown;
                    street_line: string;
                    city: string;
                    state: string;
                    country: string;
                    is_shipped: boolean;
                    delivery_tracking_link: unknown;
                    id: number;
                    createdAt: string;
                    updatedAt: string;
                } | null;
                shipping_fees: number;
                shipping_method?: {
                    region: string;
                    fee: number;
                    currency: string;
                };
                metadata: Record<string, never>;
                order_code: string;
                status: string;
                refunded: boolean;
                is_viewed: boolean;
                expiration_date: unknown;
                id: number;
                createdAt: string;
                updatedAt: string;
                items: unknown[];
                pay_for_me_code: string;
                discount_amount: number;
            };
        };
        OrderFetchResponse: {
            status: boolean;
            message: string;
            data: {
                discounts: unknown[];
                order_code: string;
                domain: string;
                currency: string;
                amount: number;
                email: string;
                status: string;
                refunded: boolean;
                paid_at: string;
                shipping_address: unknown;
                metadata: Record<string, never>;
                shipping_fees: number;
                shipping_method: unknown;
                is_viewed: boolean;
                expiration_date: string;
                pay_for_me: boolean;
                id: number;
                integration: number;
                page: unknown;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                shipping: unknown;
                createdAt: string;
                updatedAt: string;
                transaction: number;
                is_gift: boolean;
                payer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                fully_refunded: boolean;
                refunded_amount: number;
                items: components["schemas"]["OrderItemsArray"][];
                discount_amount: unknown;
            };
        };
        OrderFetchProductResponseArray: {
            order_id: number;
            transaction: number;
            order_code: string;
            customer: number;
            first_name: string;
            last_name: string;
            customer_name: string;
            phone: string;
            email: string;
            product_code: string;
            product_id: number;
            product_name: string;
            price: number;
            quantity_sold: number;
            currency: string;
            quantity: number;
            variant_id: unknown;
            variant_price: unknown;
            variant_code: unknown;
            amount: number;
            shipping_method: unknown;
            status: string;
            shipping_address: unknown;
            refunded: boolean;
            shipping: unknown;
            paid_at: string;
            created_at: string;
            is_shipped: boolean;
            is_viewed: number;
            delivery_note: unknown;
            shipping_fee: unknown;
            amount_paid: number;
            storefront_slug: string;
        };
        OrderFetchProductResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["OrderFetchProductResponseArray"][];
            meta: {
                quantity_sold: number;
                revenue: number;
                total: number;
                skipped: number;
                perPage: number;
                pageCount: number;
            };
        };
        OrderValidateResponse: {
            status: boolean;
            message: string;
            data: {
                order_code: string;
                domain: string;
                currency: string;
                amount: number;
                email: string;
                status: string;
                refunded: boolean;
                paid_at: unknown;
                shipping_address: unknown;
                metadata: unknown;
                shipping_fees: number;
                shipping_method: unknown;
                is_viewed: boolean;
                expiration_date: string;
                pay_for_me: boolean;
                id: number;
                integration: {
                    key: string;
                    name: string;
                    logo: string;
                    allowed_currencies: unknown[];
                };
                transaction: unknown;
                page: unknown;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                shipping: unknown;
                createdAt: string;
                updatedAt: string;
                payer: unknown;
            };
        };
        PageListResponseArray: {
            integration: number;
            plan: unknown;
            domain: string;
            name: string;
            description: string | null;
            amount: number | null;
            currency: string;
            slug: string;
            custom_fields: unknown[] | null;
            type: string;
            redirect_url: string | null;
            success_message: string | null;
            collect_phone: boolean;
            active: boolean;
            published: boolean;
            migrate: boolean;
            notification_email: unknown;
            metadata: Record<string, never> | null;
            split_code: unknown;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        PageListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["PageListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        PageCreate: {
            /** @description Name of page */
            name: string;
            /** @description The description of the page */
            description?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /**
             * @description The transaction currency. Defaults to your integration currency.
             * @enum {string}
             */
            currency?: "NGN" | "GHS" | "ZAR" | "KES" | "USD";
            /** @description URL slug you would like to be associated with this page. Page will be accessible at `https://paystack.com/pay/[slug]` */
            slug?: string;
            /**
             * @description The type of payment page to create. Defaults to `payment` if no type is specified.
             *
             * @enum {string}
             */
            type?: "payment" | "subscription" | "product" | "plan";
            /** @description The ID of the plan to subscribe customers on this payment page to when `type` is set to `subscription`. */
            plan?: string;
            /** @description Specifies whether to collect a fixed amount on the payment page. If true, `amount` must be passed. */
            fixed_amount?: boolean;
            /** @description The split code of the transaction split. e.g. `SPL_98WF13Eb3w` */
            split_code?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
            /** @description If you would like Paystack to redirect to a URL upon successful payment, specify the URL here.
             *      */
            redirect_url?: string;
            /** @description A success message to display to the customer after a successful transaction
             *      */
            success_message?: string;
            /** @description An email address that will receive transaction notifications for this payment page
             *      */
            notification_email?: string;
            /** @description Specify whether to collect phone numbers on the payment page
             *      */
            collect_phone?: boolean;
            /** @description If you would like to accept custom fields, specify them here. */
            custom_fields?: Record<string, never>[];
        };
        PageCreateResponse: {
            status: boolean;
            message: string;
            data: {
                name: string;
                integration: number;
                domain: string;
                slug: string;
                currency: string;
                type: string;
                collect_phone: boolean;
                active: boolean;
                published: boolean;
                migrate: boolean;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        PageFetchResponse: {
            status: boolean;
            message: string;
            data: {
                integration: number;
                domain: string;
                name: string;
                description: unknown;
                amount: number | null;
                currency: string;
                slug: string;
                custom_fields: unknown;
                type: string;
                redirect_url: unknown;
                success_message: unknown;
                collect_phone: boolean;
                active: boolean;
                published: boolean;
                migrate: boolean;
                notification_email: unknown;
                metadata: unknown;
                split_code: unknown;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        PageUpdate: {
            /** @description Name of page */
            name?: string;
            /** @description The description of the page */
            description?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /** @description Set to false to deactivate page url */
            active?: boolean;
        };
        PageUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                domain: string;
                name: string;
                description: unknown;
                amount: unknown;
                currency: string;
                slug: string;
                custom_fields: unknown;
                type: string;
                redirect_url: unknown;
                success_message: unknown;
                collect_phone: boolean;
                active: boolean;
                published: boolean;
                migrate: boolean;
                notification_email: unknown;
                metadata: unknown;
                split_code: unknown;
                id: number;
                integration: number;
                plan: unknown;
                createdAt: string;
                updatedAt: string;
            };
        };
        PageCheckSlugAvailabilityResponse: {
            status: boolean;
            message: string;
        };
        PageProduct: {
            /** @description IDs of all products to add to a page */
            product: string[];
        };
        PageProductsArray: {
            product_id: number;
            name: string;
            description: string;
            product_code: string;
            page: number;
            price: number;
            currency: string;
            quantity: number;
            type: string;
            features: unknown;
            is_shippable: number;
            domain: string;
            integration: number;
            active: number;
            in_stock: number;
        };
        PageAddProductsResponse: {
            status: boolean;
            message: string;
            data: {
                integration: number;
                plan: unknown;
                domain: string;
                name: string;
                description: unknown;
                amount: unknown;
                currency: string;
                slug: string;
                custom_fields: unknown;
                type: string;
                redirect_url: unknown;
                success_message: unknown;
                collect_phone: boolean;
                active: boolean;
                published: boolean;
                migrate: boolean;
                notification_email: unknown;
                metadata: unknown;
                split_code: unknown;
                id: number;
                createdAt: string;
                updatedAt: string;
                products: components["schemas"]["PageProductsArray"][];
            };
        };
        PaymentRequestLineItemsArray: {
            name: string;
            amount: number;
            quantity: number;
        };
        PaymentRequestTaxArray: {
            name: string;
            amount: number;
        };
        PaymentRequestListResponseArray: {
            id: number;
            integration: number;
            domain: string;
            amount: number;
            currency: string;
            due_date: string | null;
            has_invoice: boolean;
            invoice_number: number | null;
            description: string | null;
            pdf_url: string | null;
            line_items: components["schemas"]["PaymentRequestLineItemsArray"][];
            tax: components["schemas"]["PaymentRequestTaxArray"][];
            request_code: string;
            status: string;
            paid: boolean;
            paid_at: unknown;
            metadata: unknown;
            notifications: unknown[];
            offline_reference: string;
            customer: {
                id: number;
                first_name: string;
                last_name: string;
                email: string;
                customer_code: string;
                phone: string;
                metadata: Record<string, never>;
                risk_action: string;
                international_format_phone: string;
            };
            created_at: string;
            discount: unknown;
            split_code: string | null;
        };
        PaymentRequestListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["PaymentRequestListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number | string;
                page: number;
                pageCount: number;
            };
        };
        PaymentRequestCreate: {
            /** @description Customer id or code */
            customer: string;
            /** @description Payment request amount. Only useful if line items and tax values are ignored.
             *     The endpoint will throw a friendly warning if neither is available. */
            amount?: number;
            /** @description Specify the currency of the invoice. Allowed values are NGN, GHS, ZAR and USD. Defaults to NGN */
            currency?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of request due date
             */
            due_date?: string;
            /** @description A short description of the payment request */
            description?: string;
            /** @description Array of line items */
            line_items?: Record<string, never>[];
            /** @description Array of taxes */
            tax?: Record<string, never>[];
            /** @description Indicates whether Paystack sends an email notification to customer. Defaults to true */
            send_notification?: boolean;
            /** @description Indicate if request should be saved as draft. Defaults to false and overrides send_notification */
            draft?: boolean;
            /** @description Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided)
             *     even if there are no line_items or tax passed */
            has_invoice?: boolean;
            /** @description Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help
             *     override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. */
            invoice_number?: number;
            /** @description The split code of the transaction split. */
            split_code?: string;
        };
        PaymentRequestCreateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                integration: number;
                domain: string;
                amount: number;
                currency: string;
                due_date: string | null;
                has_invoice: boolean;
                invoice_number: unknown;
                description: unknown;
                line_items: unknown[];
                tax: unknown[];
                request_code: string;
                status: string;
                paid: boolean;
                metadata: unknown;
                notifications: unknown[];
                offline_reference: string;
                customer: number;
                created_at: string;
                discount: unknown;
                split_code: unknown;
            };
        };
        PaymentRequestUpdate: {
            /** @description Customer id or code */
            customer?: string;
            /** @description Payment request amount. Only useful if line items and tax values are ignored.
             *     The endpoint will throw a friendly warning if neither is available. */
            amount?: number;
            /** @description Specify the currency of the invoice. Allowed values are NGN, GHS, ZAR and USD. Defaults to NGN */
            currency?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of request due date
             */
            due_date?: string;
            /** @description A short description of the payment request */
            description?: string;
            /** @description Array of line items */
            line_items?: Record<string, never>[];
            /** @description Array of taxes */
            tax?: Record<string, never>[];
            /** @description Indicates whether Paystack sends an email notification to customer. Defaults to true */
            send_notification?: boolean;
            /** @description Indicate if request should be saved as draft. Defaults to false and overrides send_notification */
            draft?: boolean;
            /** @description Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided)
             *     even if there are no line_items or tax passed */
            has_invoice?: boolean;
            /** @description Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help
             *     override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. */
            invoice_number?: number;
            /** @description The split code of the transaction split. */
            split_code?: string;
        };
        PaymentRequestNotificationsArray: {
            sent_at: string;
            channel: string;
        };
        PaymentRequestUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                integration: number;
                domain: string;
                amount: number;
                currency: string;
                due_date: string | null;
                has_invoice: boolean;
                invoice_number: number | null;
                description: unknown;
                pdf_url: string | null;
                line_items: unknown[];
                tax: unknown[];
                request_code: string;
                status: string;
                paid: boolean;
                paid_at: unknown;
                metadata: unknown;
                notifications: components["schemas"]["PaymentRequestNotificationsArray"][];
                offline_reference: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: {
                        calling_code?: string;
                    };
                    risk_action: string;
                    international_format_phone: string;
                };
                created_at: string;
                discount: unknown;
                split_code: unknown;
            };
        };
        PaymentRequestVerifyResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                integration: {
                    key: string;
                    name: string;
                    logo: string;
                    allowed_currencies: string[];
                };
                domain: string;
                amount: number;
                currency: string;
                due_date: string | null;
                has_invoice: boolean;
                invoice_number: number | null;
                description: unknown;
                pdf_url: string | null;
                line_items: unknown[];
                tax: unknown[];
                request_code: string;
                status: string;
                paid: boolean;
                paid_at: unknown;
                metadata: unknown;
                notifications: components["schemas"]["PaymentRequestNotificationsArray"][];
                offline_reference: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: {
                        calling_code?: string;
                    };
                    risk_action: string;
                    international_format_phone: string;
                };
                created_at: string;
                discount: unknown;
                split_code: unknown;
                pending_amount: number;
            };
        };
        PaymentRequestSendNotificationResponse: {
            status: boolean;
            message: string;
        };
        PaymentRequestPendingArray: {
            currency: string;
            amount: number;
        };
        PaymentRequestSuccessfulArray: {
            currency: string;
            amount: number;
        };
        PaymentRequestTotalArray: {
            currency: string;
            amount: number;
        };
        PaymentRequestTotalResponse: {
            status: boolean;
            message: string;
            data: {
                pending: components["schemas"]["PaymentRequestPendingArray"][];
                successful: components["schemas"]["PaymentRequestSuccessfulArray"][];
                total: components["schemas"]["PaymentRequestTotalArray"][];
            };
        };
        PaymentRequestFinalizeResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                integration: number;
                domain: string;
                amount: number;
                currency: string;
                due_date: string | null;
                has_invoice: boolean;
                invoice_number: number | null;
                description: string | null;
                pdf_url: unknown;
                line_items: components["schemas"]["PaymentRequestLineItemsArray"][];
                tax: components["schemas"]["PaymentRequestTaxArray"][];
                request_code: string;
                status: string;
                paid: boolean;
                paid_at: unknown;
                metadata: unknown;
                notifications: unknown[];
                offline_reference: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: {
                        calling_code?: string;
                    };
                    risk_action: string;
                    international_format_phone: string;
                };
                created_at: string;
                discount: {
                    type: string;
                    amount: number;
                } | null;
                split_code: unknown;
                pending_amount: number;
            };
        };
        PaymentRequestArchiveResponse: {
            status: boolean;
            message: string;
        };
        TransferRecipientListResponseArray: {
            active: boolean;
            createdAt: string;
            currency: string;
            description: string;
            domain: string;
            email: string | null;
            id: number;
            integration: number;
            metadata: unknown;
            name: string;
            recipient_code: string;
            type: string;
            updatedAt: string;
            is_deleted: boolean;
            isDeleted: boolean;
            details: {
                authorization_code: unknown;
                account_number: string;
                account_name: string | null;
                bank_code: string;
                bank_name: string;
            };
        };
        TransferRecipientListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["TransferRecipientListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        TransferRecipientCreate: {
            /** @description Recipient Type (Only nuban at this time) */
            type: string;
            /** @description Recipient's name */
            name: string;
            /** @description Recipient's bank account number */
            account_number: string;
            /** @description Recipient's bank code. You can get the list of Bank Codes by calling the List Banks endpoint */
            bank_code: string;
            /** @description A description for this recipient */
            description?: string;
            /** @description Currency for the account receiving the transfer */
            currency?: string;
            /** @description An authorization code from a previous transaction */
            authorization_code?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        TransferRecipientCreateResponse: {
            status: boolean;
            message: string;
            data: {
                active: boolean;
                createdAt: string;
                currency: string;
                description: string;
                domain: string;
                email: string;
                id: number;
                integration: number;
                metadata: unknown;
                name: string;
                recipient_code: string;
                type: string;
                updatedAt: string;
                is_deleted: boolean;
                isDeleted: boolean;
                details: {
                    authorization_code: unknown;
                    account_number: string;
                    account_name: string | null;
                    bank_code: string;
                    bank_name: string;
                };
            };
        };
        TransferRecipientBulk: {
            /** @description A list of transfer recipient object. Each object should contain type, name, and bank_code.
             *     Any Create Transfer Recipient param can also be passed. */
            batch: components["schemas"]["TransferRecipientCreate"][];
        };
        ErrorRecordsArray: {
            type: string;
            name: string;
            description: string;
            account_number: string;
            bank_code: string;
            currency: string;
            email: string;
        };
        TransferRecipientErrorsArray: {
            message: string;
            records: components["schemas"]["ErrorRecordsArray"][];
        };
        TransferRecipientBulkCreateResponse: {
            status: boolean;
            message: string;
            data: {
                success: unknown[];
                errors: components["schemas"]["TransferRecipientErrorsArray"][];
            };
        };
        TransferRecipientFetchResponse: {
            status: boolean;
            message: string;
            data: {
                integration: number;
                domain: string;
                type: string;
                currency: string;
                name: string;
                details: {
                    account_number: string;
                    account_name: string;
                    bank_code: string;
                    bank_name: string;
                };
                description: string;
                metadata: unknown;
                recipient_code: string;
                active: boolean;
                recipient_account: string;
                institution_code: string;
                email: string;
                id: number;
                isDeleted: boolean;
                createdAt: string;
                updatedAt: string;
            };
        };
        TransferRecipientUpdate: {
            /** @description Recipient's name */
            name?: string;
            /** @description Recipient's email address */
            email?: string;
        };
        TransferRecipientUpdateResponse: {
            status: boolean;
            message: string;
        };
        TransferRecipientDeleteResponse: {
            status: boolean;
            message: string;
        };
        TransferListResponseArray: {
            amount: number;
            createdAt: string;
            currency: string;
            domain: string;
            failures: unknown;
            id: number;
            integration: number;
            reason: string;
            reference: string;
            source: string;
            source_details: unknown;
            status: string;
            titan_code: unknown;
            transfer_code: string;
            transferred_at: unknown;
            updatedAt: string;
            recipient: {
                active: boolean;
                createdAt: string;
                currency: string;
                description: string;
                domain: string;
                email: string;
                id: number;
                integration: number;
                metadata: unknown;
                name: string;
                recipient_code: string;
                type: string;
                updatedAt: string;
                is_deleted: boolean;
                isDeleted: boolean;
                details: {
                    authorization_code: unknown;
                    account_number: string;
                    account_name: string;
                    bank_code: string;
                    bank_name: string;
                };
            };
            session: {
                provider: unknown;
                id: unknown;
            };
            fee_charged: number;
        };
        TransferListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["TransferListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        TransferInitiate: {
            /** @description Where should we transfer from? Only balance is allowed for now */
            source: string;
            /** @description Amount to transfer in kobo if currency is NGN and pesewas if currency is GHS. */
            amount: string;
            /** @description The transfer recipient's code */
            recipient: string;
            /** @description The reason or narration for the transfer. */
            reason?: string;
            /** @description Specify the currency of the transfer. Defaults to NGN. */
            currency?: string;
            /** @description If specified, the field should be a unique identifier (in lowercase) for the object.
             *     Only -,_ and alphanumeric characters are allowed. */
            reference?: string;
        };
        TransferCreateResponse: {
            status: boolean;
            message: string;
            data: {
                transfersessionid: unknown[];
                domain: string;
                amount: number;
                currency: string;
                reference: string;
                source: string;
                source_details: unknown;
                reason: string;
                status: string;
                failures: unknown;
                transfer_code: string;
                titan_code: unknown;
                transferred_at: unknown;
                id: number;
                integration: number;
                request: number;
                recipient: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        TransferFinalize: {
            /** @description The transfer code you want to finalize */
            transfer_code: string;
            /** @description OTP sent to business phone to verify transfer */
            otp: string;
        };
        TransferBulk: {
            /** @description Where should we transfer from? Only balance is allowed for now */
            source: string;
            /** @description A list of transfer object. Each object should contain amount, recipient, and reference */
            transfers: components["schemas"]["TransferInitiate"][];
        };
        TransferBulkResponseArray: {
            reference: string;
            recipient: string;
            amount: number;
            transfer_code: string;
            currency: string;
            status: string;
        };
        TransferBulkResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["TransferBulkResponseArray"][];
        };
        TransferFeesBreakdownArray: {
            amount: string;
            formula: unknown;
            type: string;
        };
        TransferFetchResponse: {
            status: boolean;
            message: string;
            data: {
                amount: number;
                createdAt: string;
                currency: string;
                domain: string;
                failures: unknown;
                id: number;
                integration: number;
                reason: string;
                reference: string;
                source: string;
                source_details: unknown;
                status: string;
                titan_code: unknown;
                transfer_code: string;
                request: number;
                transferred_at: unknown;
                updatedAt: string;
                recipient: {
                    active: boolean;
                    createdAt: string;
                    currency: string;
                    description: string;
                    domain: string;
                    email: string;
                    id: number;
                    integration: number;
                    metadata: unknown;
                    name: string;
                    recipient_code: string;
                    type: string;
                    updatedAt: string;
                    is_deleted: boolean;
                    isDeleted: boolean;
                    details: {
                        authorization_code: unknown;
                        account_number: string;
                        account_name: string | null;
                        bank_code: string;
                        bank_name: string;
                    };
                };
                session: {
                    provider: unknown;
                    id: unknown;
                };
                fee_charged: number;
                fees_breakdown: components["schemas"]["TransferFeesBreakdownArray"][] | null;
                gateway_response: string | null;
            };
        };
        TransferVerifyResponse: {
            status: boolean;
            message: string;
            data: {
                amount: number;
                createdAt: string;
                currency: string;
                domain: string;
                failures: unknown;
                id: number;
                integration: number;
                reason: string;
                reference: string;
                source: string;
                source_details: unknown;
                status: string;
                titan_code: unknown;
                transfer_code: string;
                transferred_at: unknown;
                updatedAt: string;
                recipient: {
                    active: boolean;
                    createdAt: string;
                    currency: string;
                    description: string;
                    domain: string;
                    email: string;
                    id: number;
                    integration: number;
                    metadata: unknown;
                    name: string;
                    recipient_code: string;
                    type: string;
                    updatedAt: string;
                    is_deleted: boolean;
                    details: {
                        authorization_code: unknown;
                        account_number: string;
                        account_name: string;
                        bank_code: string;
                        bank_name: string;
                    };
                };
                session: {
                    provider: unknown;
                    id: unknown;
                };
                gateway_response: string | null;
            };
        };
        TransferResendOTP: {
            /** @description The transfer code that requires an OTP validation */
            transfer_code: string;
            /** @description Either resend_otp or transfer */
            reason: string;
        };
        TransferResendsOtpResponse: {
            status: boolean;
            message: string;
        };
        TransferDisablesOtpResponse: {
            status: boolean;
            message: string;
        };
        TransferFinalizeDisableOTP: {
            /** @description OTP sent to business phone to verify disabling OTP requirement */
            otp: string;
        };
        TransferFinalizeDisablesOtpResponse: {
            status: boolean;
            message: string;
        };
        TransferEnablesOtpResponse: {
            status: boolean;
            message: string;
        };
        BalanceCheckResponseArray: {
            currency: string;
            balance: number;
        };
        BalanceCheckResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["BalanceCheckResponseArray"][];
        };
        BalanceFetchLedgerResponseArray: {
            integration: number;
            domain: string;
            balance: number;
            currency: string;
            difference: number;
            reason: string;
            model_responsible: string;
            model_row: number;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        BalanceFetchLedgerResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["BalanceFetchLedgerResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        ChargeCreate: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: string;
            /** @description An authorization code to charge. */
            authorization_code?: string;
            /** @description 4-digit PIN (send with a non-reusable authorization code) */
            pin?: string;
            /** @description Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
            reference?: string;
            /**
             * Format: date-time
             * @description The customer's birthday in the format YYYY-MM-DD e.g 2017-05-16
             */
            birthday?: string;
            /** @description This is the unique identifier of the device a user uses in making payment.
             *     Only -, .`, = and alphanumeric characters are allowed. */
            device_id?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        Bank: {
            /** @description Customer's bank code */
            code?: string;
            /** @description Customer's account number */
            account_number?: string;
        };
        MobileMoney: {
            /** @description Customer's phone number */
            phone?: string;
            /** @description The telco provider of customer's phone number. This can be fetched from the List Bank endpoint */
            provider?: string;
        };
        USSD: {
            /**
             * @description The three-digit USSD code.
             * @enum {string}
             */
            type?: 737 | 919 | 822 | 966;
        };
        EFT: {
            /** @description The EFT provider */
            provider?: string;
        };
        ChargeCreateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: unknown;
                amount: number;
                message: string | null;
                gateway_response: string;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number;
                fees_split: unknown;
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                    receiver_bank_account_number: unknown;
                    receiver_bank: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                plan: unknown;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
                transaction_date: string;
                plan_object: Record<string, never>;
                subaccount: Record<string, never>;
            };
        };
        ChargeSubmitPin: {
            /** @description Customer's PIN */
            pin: string;
            /** @description Transaction reference that requires the PIN */
            reference: string;
        };
        ChargeSubmitPinResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: unknown;
                amount: number;
                message: unknown;
                gateway_response: string;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number;
                fees_split: unknown;
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                    receiver_bank_account_number: unknown;
                    receiver_bank: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                plan: unknown;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
                transaction_date: string;
                plan_object: Record<string, never>;
                subaccount: Record<string, never>;
            };
        };
        ChargeSubmitOTP: {
            /** @description Customer's OTP */
            otp: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitOtpResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: unknown;
                amount: number;
                message: unknown;
                gateway_response: string;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number;
                fees_split: unknown;
                authorization: {
                    authorization_code: string;
                    bin: string;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                    receiver_bank_account_number: unknown;
                    receiver_bank: unknown;
                };
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                plan: unknown;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
                transaction_date: string;
                plan_object: Record<string, never>;
                subaccount: Record<string, never>;
            };
        };
        ChargeSubmitPhone: {
            /** @description Customer's mobile number */
            phone: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitPhoneResponse: {
            status: boolean;
            message: string;
            data: {
                reference: string;
                status: string;
                display_text: string;
            };
        };
        ChargeSubmitBirthday: {
            /** @description Customer's birthday in the format YYYY-MM-DD e.g 2016-09-21 */
            birthday: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitBirthdayResponse: {
            status: boolean;
            message: string;
            data: {
                status: string;
                display_text: string;
            };
        };
        ChargeSubmitAddress: {
            /** @description Customer's address */
            address: string;
            /** @description Customer's city */
            city: string;
            /** @description Customer's state */
            state: string;
            /** @description Customer's zipcode */
            zipcode: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeCheckPendingResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                receipt_number: string | null;
                amount: number;
                message: string | null;
                gateway_response: string;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number | null;
                fees_split: unknown;
                authorization: {
                    authorization_code: string;
                    bin: string | null;
                    last4: string;
                    exp_month: string;
                    exp_year: string;
                    channel: string;
                    card_type: string;
                    bank: string;
                    country_code: string;
                    brand: string;
                    reusable: boolean;
                    signature: string;
                    account_name: unknown;
                    receiver_bank_account_number: unknown;
                    receiver_bank: unknown;
                };
                customer: {
                    id: number;
                    first_name: string | null;
                    last_name: string | null;
                    email: string;
                    customer_code: string;
                    phone: string | null;
                    metadata: Record<string, never> | null;
                    risk_action: string;
                    international_format_phone: string | null;
                };
                plan: unknown;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                requested_amount: number;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
                transaction_date: string;
                plan_object: Record<string, never>;
                subaccount: Record<string, never>;
            };
        };
        BulkChargeListResponseArray: {
            integration: number;
            domain: string;
            batch_code: string;
            status: string;
            easy_cron_id: unknown;
            reference: string;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        BulkChargeListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["BulkChargeListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number | string;
                page: number;
                pageCount: number;
            };
        };
        BulkChargeInitiate: {
            /** @description Customer's card authorization code */
            authorization: string;
            /** @description Amount to charge on the authorization */
            amount: string;
        };
        BulkChargeInitiateResponse: {
            status: boolean;
            message: string;
            data: {
                batch_code: string;
                reference: string;
                id: number;
                integration: number;
                domain: string;
                status: string;
                total_charges: number;
                pending_charges: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        BulkChargeFetchResponse: {
            status: boolean;
            message: string;
            data: {
                batch_code: string;
                reference: string;
                id: number;
                integration: number;
                domain: string;
                status: string;
                total_charges: number;
                pending_charges: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        BulkChargeFetchBulkBatchChargesResponseArray: {
            integration: number;
            bulkcharge: number;
            customer: {
                id: number;
                first_name: string;
                last_name: string;
                email: string;
                customer_code: string;
                phone: string;
                metadata: {
                    calling_code?: string;
                };
                risk_action: string;
                international_format_phone: string;
            };
            authorization: {
                authorization_code: string;
                bin: string;
                last4: string;
                exp_month: string;
                exp_year: string;
                channel: string;
                card_type: string;
                bank: string;
                country_code: string;
                brand: string;
                reusable: boolean;
                signature: string;
                account_name: unknown;
            };
            domain: string;
            amount: number;
            at_least: number;
            currency: string;
            reference: string;
            metadata: {
                custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
            };
            status: string;
            message: string;
            attempt_partial_debit: boolean;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        BulkChargeFetchBulkBatchChargesResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["BulkChargeFetchBulkBatchChargesResponseArray"][];
            meta: {
                perPage: string;
                total: number;
                skipped: number;
                page: number;
                pageCount: number;
            };
        };
        BulkChargePauseResponse: {
            status: boolean;
            message: string;
        };
        BulkChargeResumeResponse: {
            status: boolean;
            message: string;
        };
        PaymentSession: {
            /**
             * @description Time in seconds before a transaction becomes invalid
             * @example 30
             */
            timeout: string;
        };
        RefundListResponseArray: {
            integration: number;
            transaction: number;
            dispute: unknown;
            settlement: unknown;
            id: number;
            domain: string;
            currency: string;
            amount: number;
            status: string;
            refunded_at: unknown;
            refunded_by: string;
            customer_note: string;
            merchant_note: string;
            deducted_amount: number;
            fully_deducted: number;
            createdAt: string;
            bank_reference: unknown;
            transaction_reference: string;
            reason: string;
            customer: {
                id: number;
                first_name: string;
                last_name: string;
                email: string;
                customer_code: string;
                phone: string | null;
                metadata: string;
                risk_action: string;
                international_format_phone: string;
            };
            refund_type: string;
            transaction_amount: number;
            initiated_by: string;
            refund_channel: string;
            session_id: unknown;
            collect_account_number: boolean;
        };
        RefundListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["RefundListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: string;
                page: number;
                pageCount: number;
                failedRefundCount: number;
            };
        };
        RefundCreate: {
            /** @description Transaction reference or id */
            transaction: string;
            /** @description Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer.
             *     Amount cannot be more than the original transaction amount */
            amount?: number;
            /** @description Three-letter ISO currency. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Customer reason */
            customer_note?: string;
            /** @description Merchant reason */
            merchant_note?: string;
        };
        RefundCreateResponse: {
            status: boolean;
            message: string;
            data: {
                transaction: {
                    id: number;
                    domain: string;
                    reference: string;
                    amount: number;
                    paid_at: string;
                    channel: string;
                    currency: string;
                    authorization: {
                        exp_month: unknown;
                        exp_year: unknown;
                        account_name: unknown;
                    };
                    customer: {
                        international_format_phone: string | null;
                    };
                    plan: Record<string, never>;
                    subaccount: {
                        currency: unknown;
                    };
                    split: Record<string, never>;
                    order_id: unknown;
                    paidAt: string;
                    pos_transaction_data: unknown;
                    source: unknown;
                    fees_breakdown: unknown;
                };
                integration: number;
                deducted_amount: number;
                channel: unknown;
                merchant_note: string;
                customer_note: string;
                status: string;
                refunded_by: string;
                expected_at: string;
                currency: string;
                domain: string;
                amount: number;
                fully_deducted: boolean;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        RefundFetchResponse: {
            status: boolean;
            message: string;
            data: {
                integration: number;
                transaction: number;
                dispute: unknown;
                settlement: unknown;
                id: number;
                domain: string;
                currency: string;
                amount: number;
                status: string;
                refunded_at: unknown;
                refunded_by: string;
                customer_note: string;
                merchant_note: string;
                deducted_amount: number;
                fully_deducted: number;
                createdAt: string;
                bank_reference: unknown;
                transaction_reference: string;
                reason: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: string;
                    risk_action: string;
                    international_format_phone: string;
                };
                refund_type: string;
                transaction_amount: number;
                initiated_by: string;
                refund_channel: string;
                session_id: unknown;
                collect_account_number: boolean;
            };
        };
        DisputeHistoryArray: {
            status: string;
            by: string;
            createdAt: string;
        };
        DisputeMessagesArray: {
            sender: string;
            body: string;
            createdAt: string;
        };
        DisputeListResponseArray: {
            id: number;
            refund_amount: number;
            currency: string;
            status: string;
            resolution: unknown;
            domain: string;
            transaction: {
                id: number;
                domain: string;
                status: string;
                reference: string;
                amount: number;
                message: unknown;
                gateway_response: string;
                paid_at: string;
                created_at: string;
                channel: string;
                currency: string;
                ip_address: string;
                metadata: {
                    custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                };
                log: unknown;
                fees: number;
                fees_split: unknown;
                authorization: Record<string, never>;
                customer: unknown;
                plan: Record<string, never>;
                subaccount: Record<string, never>;
                split: Record<string, never>;
                order_id: unknown;
                paidAt: string;
                createdAt: string;
                pos_transaction_data: unknown;
                source: unknown;
                fees_breakdown: unknown;
                connect: unknown;
            };
            transaction_reference: unknown;
            category: string;
            customer: {
                id: number;
                first_name: string;
                last_name: string;
                email: string;
                customer_code: string;
                phone: string | null;
                metadata: string;
                risk_action: string;
                international_format_phone: string;
            };
            bin: string;
            last4: string;
            dueAt: unknown;
            resolvedAt: unknown;
            evidence: unknown;
            attachments: unknown;
            note: unknown;
            history: components["schemas"]["DisputeHistoryArray"][];
            messages: components["schemas"]["DisputeMessagesArray"][];
            createdAt: string;
            updatedAt: string;
        };
        DisputeListResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["DisputeListResponseArray"][];
            meta: {
                total: number;
                skipped: number;
                perPage: number;
                page: number;
                pageCount: number;
            };
        };
        DisputeFetchResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                refund_amount: number;
                currency: string;
                status: string;
                resolution: unknown;
                domain: string;
                transaction: {
                    id: number;
                    domain: string;
                    status: string;
                    reference: string;
                    receipt_number?: number | null;
                    amount: number;
                    message: unknown;
                    gateway_response: string;
                    paid_at: string;
                    created_at: string;
                    channel: string;
                    currency: string;
                    ip_address: string;
                    metadata: {
                        custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                    };
                    log: unknown;
                    fees: number;
                    fees_split: unknown;
                    authorization: {
                        receiver_bank_account_number: unknown;
                        receiver_bank: unknown;
                    };
                    customer: {
                        international_format_phone: unknown;
                    };
                    plan: Record<string, never>;
                    subaccount: Record<string, never>;
                    split: Record<string, never>;
                    order_id: unknown;
                    paidAt: string;
                    createdAt: string;
                    requested_amount: number;
                    pos_transaction_data: unknown;
                    source: unknown;
                    fees_breakdown: unknown;
                    connect: unknown;
                };
                transaction_reference: unknown;
                category: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                bin: string;
                last4: string;
                dueAt: unknown;
                resolvedAt: unknown;
                evidence: unknown;
                attachments: unknown;
                note: unknown;
                history: components["schemas"]["DisputeHistoryArray"][];
                messages: components["schemas"]["DisputeMessagesArray"][];
                createdAt: string;
                updatedAt: string;
            };
        };
        DisputeUpdate: {
            /** @description The amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            refund_amount: string;
            /** @description Filename of attachment returned via response from the Dispute upload URL */
            uploaded_filename?: string;
        };
        DisputeUpdateResponse: {
            status: boolean;
            message: string;
            data: {
                id: number;
                refund_amount: number;
                currency: string;
                status: string;
                resolution: unknown;
                domain: string;
                transaction: {
                    id: number;
                    domain: string;
                    status: string;
                    reference: string;
                    receipt_number?: number | null;
                    amount: number;
                    message: unknown;
                    gateway_response: string;
                    paid_at: string;
                    created_at: string;
                    channel: string;
                    currency: string;
                    ip_address: string;
                    metadata: {
                        custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                    };
                    log: unknown;
                    fees: number;
                    fees_split: unknown;
                    authorization: {
                        receiver_bank_account_number: unknown;
                        receiver_bank: unknown;
                    };
                    customer: {
                        international_format_phone: unknown;
                    };
                    plan: Record<string, never>;
                    subaccount: Record<string, never>;
                    split: Record<string, never>;
                    order_id: unknown;
                    paidAt: string;
                    createdAt: string;
                    requested_amount: number;
                    pos_transaction_data: unknown;
                    source: unknown;
                    fees_breakdown: unknown;
                    connect: unknown;
                };
                transaction_reference: unknown;
                category: string;
                customer: {
                    id: number;
                    first_name: string;
                    last_name: string;
                    email: string;
                    customer_code: string;
                    phone: string;
                    metadata: Record<string, never>;
                    risk_action: string;
                    international_format_phone: string;
                };
                bin: string;
                last4: string;
                dueAt: unknown;
                resolvedAt: unknown;
                evidence: unknown;
                attachments: unknown;
                note: unknown;
                history: components["schemas"]["DisputeHistoryArray"][];
                messages: components["schemas"]["DisputeMessagesArray"][];
                createdAt: string;
                updatedAt: string;
            };
        };
        DisputeUploadURLResponse: {
            status: boolean;
            message: string;
            data: {
                signedUrl: string;
                fileName: string;
            };
        };
        DisputeExportResponse: {
            status: boolean;
            message: string;
            data: {
                path: string;
                expiresAt: string;
            };
        };
        DisputeListTransactionResponse: {
            status: boolean;
            message: string;
            data: {
                history: components["schemas"]["DisputeHistoryArray"][];
                messages: components["schemas"]["DisputeMessagesArray"][];
                currency: string;
                last4: string;
                bin: string;
                transaction_reference: unknown;
                merchant_transaction_reference: string;
                refund_amount: number;
                status: string;
                domain: string;
                resolution: unknown;
                category: string;
                note: unknown;
                attachments: unknown;
                id: number;
                integration: number;
                transaction: {
                    id: number;
                    domain: string;
                    status: string;
                    reference: string;
                    receipt_number?: number | null;
                    amount: number;
                    message: unknown;
                    gateway_response: string;
                    paid_at: string;
                    created_at: string;
                    channel: string;
                    currency: string;
                    ip_address: string;
                    metadata: {
                        custom_fields: components["schemas"]["MetadataCustomFieldsArray"][];
                    };
                    log: unknown;
                    fees: number;
                    fees_split: unknown;
                    authorization: {
                        receiver_bank_account_number: unknown;
                        receiver_bank: unknown;
                    };
                    customer: {
                        international_format_phone: unknown;
                    };
                    plan: Record<string, never>;
                    subaccount: Record<string, never>;
                    split: Record<string, never>;
                    order_id: unknown;
                    paidAt: string;
                    createdAt: string;
                    requested_amount: number;
                    pos_transaction_data: unknown;
                    source: unknown;
                    fees_breakdown: unknown;
                    connect: Record<string, never> | null;
                };
                created_by: number;
                evidence: unknown;
                resolvedAt: unknown;
                createdAt: string;
                updatedAt: string;
                dueAt: unknown;
            };
        };
        DisputeResolve: {
            /** @description Dispute resolution. Accepted values, merchant-accepted, declined */
            resolution: string;
            /** @description Reason for resolving */
            message: string;
            /** @description The amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            refund_amount: string;
            /** @description Filename of attachment returned via response from the Dispute upload URL */
            uploaded_filename: string;
            /** @description Evidence Id for fraud claims */
            evidence?: number;
        };
        DisputeResolveResponse: {
            status: boolean;
            message: string;
            data: {
                currency: string;
                last4: string;
                bin: string;
                transaction_reference: unknown;
                merchant_transaction_reference: string;
                refund_amount: number;
                status: string;
                domain: string;
                resolution: string;
                category: string;
                note: unknown;
                attachments: string;
                id: number;
                integration: number;
                transaction: number;
                created_by: number;
                evidence: number;
                resolvedAt: string;
                createdAt: string;
                updatedAt: string;
                dueAt: unknown;
                message: {
                    dispute: number;
                    sender: string;
                    body: string;
                    id: number;
                    createdAt: string;
                    updatedAt: string;
                };
            };
        };
        DisputeEvidence: {
            /** @description Customer email */
            customer_email: string;
            /** @description Customer name */
            customer_name: string;
            /** @description Customer mobile number */
            customer_phone: string;
            /** @description Details of service offered */
            service_details: string;
            /** @description Delivery address */
            delivery_address?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of delivery date (YYYY-MM-DD)
             */
            delivery_date?: string;
        };
        DisputeAddEvidenceResponse: {
            status: boolean;
            message: string;
            data: {
                customer_email: string;
                customer_name: string;
                customer_phone: string;
                service_details: string;
                delivery_address: string;
                delivery_date: string;
                dispute: number;
                id: number;
                createdAt: string;
                updatedAt: string;
            };
        };
        MiscellaneousListBanksResponseArray: {
            name: string;
            slug: string;
            code: string;
            longcode: string;
            gateway: string | null;
            pay_with_bank: boolean;
            supports_transfer: boolean;
            active: boolean;
            is_deleted: boolean | null;
            country: string;
            currency: string;
            type: string;
            id: number;
            createdAt: string;
            updatedAt: string;
        };
        MiscellaneousListBanksResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["MiscellaneousListBanksResponseArray"][];
        };
        VerificationResolveAccountNumberResponse: {
            status: boolean;
            message: string;
            data: {
                account_number: string;
                account_name: string;
                bank_id: number;
            };
        };
        BankValidateRequest: {
            /** @description Customer's first and last name registered with their bank */
            account_name: string;
            /** @description Customer's account number */
            account_number: string;
            /**
             * @description The type of the customer's account number
             * @enum {string}
             */
            account_type: "personal" | "business";
            /** @description The bank code of the customer’s bank. You can fetch the bank codes by using our List Banks endpoint */
            bank_code: string;
            /** @description The two digit ISO code of the customer’s bank */
            country_code: string;
            /**
             * @description Customer’s mode of identity
             * @enum {string}
             */
            document_type: "identityNumber" | "passportNumber" | "businessRegistrationNumber";
            /** @description Customer’s mode of identity number */
            document_number?: string;
        };
        VerificationValidateAccountResponse: {
            status: boolean;
            message: string;
            data: {
                verified: boolean;
                verificationMessage: string;
            };
        };
        VerificationResolveCardBINResponse: {
            status: boolean;
            message: string;
            data: {
                bin: string;
                brand: string;
                sub_brand: string;
                country_code: string;
                country_name: string;
                card_type: string;
                bank: string;
                currency: string;
                linked_bank_id: number;
            };
        };
        MiscellaneousListCountriesResponseArray: {
            id: number;
            active_for_dashboard_onboarding: boolean;
            name: string;
            iso_code: string;
            default_currency_code: string;
            integration_defaults: Record<string, never>;
            calling_code: string;
            pilot_mode: boolean;
            relationships: {
                currency: {
                    type: string;
                    data: string[];
                    supported_currencies: {
                        NGN: {
                            bank: {
                                bank_type: string;
                                branch_code: boolean;
                                branch_code_type: string;
                                account_name: boolean;
                                account_verification_required: boolean;
                                account_number_label: string;
                                account_number_pattern: {
                                    exact_match: boolean;
                                    pattern: string;
                                };
                                documents: unknown[];
                                show_account_number_tooltip: boolean;
                            };
                        };
                        USD: {
                            bank: {
                                bank_type: string;
                                required_fields: string[];
                                branch_code: boolean;
                                branch_code_type: string;
                                account_name: boolean;
                                account_verification_required: boolean;
                                account_number_label: string;
                                account_number_pattern: {
                                    exact_match: boolean;
                                    pattern: string;
                                };
                                documents: unknown[];
                                notices: string[];
                            };
                        };
                    };
                };
                integration_feature: {
                    type: string;
                    data: unknown[];
                };
                integration_type: {
                    type: string;
                    data: string[];
                };
                payment_method: {
                    type: string;
                    data: string[];
                };
            };
        };
        MiscellaneousListCountriesResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["MiscellaneousListCountriesResponseArray"][];
        };
        MiscellaneousListStatesResponseArray: {
            name: string;
            slug: string;
            abbreviation: string;
        };
        MiscellaneousListStatesResponse: {
            status: boolean;
            message: string;
            data: components["schemas"]["MiscellaneousListStatesResponseArray"][];
        };
    };
    responses: {
        /** @description Transaction Initialize response */
        TransactionInitializeSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionInitializeResponse"];
            };
        };
        /** @description Responses from the Transaction Initialize endpoint */
        TransactionInitializeBadRequestResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionInitializeBadRequestModel"];
            };
        };
        /** @description Unauthorized operation */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Transaction Verify response */
        TransactionVerifySuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionVerifyResponse"];
            };
        };
        /** @description Entity not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Transaction List response */
        TransactionListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionListResponse"];
            };
        };
        /** @description Transaction Fetch response */
        TransactionFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionFetchResponse"];
            };
        };
        /** @description Transaction Timeline response */
        TransactionTimelineSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionTimelineResponse"];
            };
        };
        /** @description Transaction Totals response */
        TransactionTotalsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionTotalsResponse"];
            };
        };
        /** @description Transaction Export response */
        TransactionExportSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionExportResponse"];
            };
        };
        /** @description Transaction Charge response */
        TransactionChargeSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionChargeResponse"];
            };
        };
        /** @description Transaction Partial Debit response */
        TransactionPartialDebitSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransactionPartialDebitResponse"];
            };
        };
        /** @description Request successful */
        Ok: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Response"];
            };
        };
        /** @description Split List response */
        SplitListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitListResponse"];
            };
        };
        /** @description Split Create response */
        SplitCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitCreateResponse"];
            };
        };
        /** @description Split Fetch response */
        SplitFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitFetchResponse"];
            };
        };
        /** @description Split Update response */
        SplitUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitUpdateResponse"];
            };
        };
        /** @description Split Add Update Subaccount response */
        SplitAddUpdateSubaccountSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitAddUpdateSubaccountResponse"];
            };
        };
        /** @description Split Remove Subaccount response */
        SplitRemoveSubaccountSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SplitRemoveSubaccountResponse"];
            };
        };
        /** @description Terminal Get Status response */
        TerminalGetStatusSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalGetStatusResponse"];
            };
        };
        /** @description Terminal Lists response */
        TerminalListsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalListsResponse"];
            };
        };
        /** @description Terminal Get response */
        TerminalGetSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalGetResponse"];
            };
        };
        /** @description Terminal Update response */
        TerminalUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalUpdateResponse"];
            };
        };
        /** @description Terminal Commission Device response */
        TerminalCommissionDeviceSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalCommissionDeviceResponse"];
            };
        };
        /** @description Terminal Decommission Device response */
        TerminalDecommissionDeviceSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TerminalDecommissionDeviceResponse"];
            };
        };
        /** @description Customer List response */
        CustomerListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerListResponse"];
            };
        };
        /** @description Customer Create response */
        CustomerCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerCreateResponse"];
            };
        };
        /** @description Customer Fetch response */
        CustomerFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerFetchResponse"];
            };
        };
        /** @description Customer Update response */
        CustomerUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerUpdateResponse"];
            };
        };
        /** @description Customer Whitelist Blacklist response */
        CustomerWhitelistBlacklistSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerWhitelistBlacklistResponse"];
            };
        };
        /** @description Customer Deactivate Authorization response */
        CustomerDeactivateAuthorizationSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerDeactivateAuthorizationResponse"];
            };
        };
        /** @description Customer Validate response */
        CustomerValidateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CustomerValidateResponse"];
            };
        };
        /** @description Dedicated Nuban Fetch response */
        DedicatedNubanFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DedicatedNubanFetchResponse"];
            };
        };
        /** @description Dedicated Nuban Create response */
        DedicatedNubanCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DedicatedNubanCreateResponse"];
            };
        };
        /** @description Dedicated Nuban Deactivate response */
        DedicatedNubanDeactivateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DedicatedNubanDeactivateResponse"];
            };
        };
        /** @description Responses from the Transaction Initialize endpoint */
        ApplePayOkResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApplePayCreateOkModel"];
            };
        };
        /** @description Subaccount List response */
        SubaccountListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubaccountListResponse"];
            };
        };
        /** @description Subaccount Create response */
        SubaccountCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubaccountCreateResponse"];
            };
        };
        /** @description Subaccount Fetch response */
        SubaccountFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubaccountFetchResponse"];
            };
        };
        /** @description Subaccount Update response */
        SubaccountUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubaccountUpdateResponse"];
            };
        };
        /** @description Plan List response */
        PlanListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PlanListResponse"];
            };
        };
        /** @description Plan Create response */
        PlanCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PlanCreateResponse"];
            };
        };
        /** @description Plan Fetch response */
        PlanFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PlanFetchResponse"];
            };
        };
        /** @description Plan Update response */
        PlanUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PlanUpdateResponse"];
            };
        };
        /** @description Subscription List response */
        SubscriptionListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubscriptionListResponse"];
            };
        };
        /** @description Subscription Create response */
        SubscriptionCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubscriptionCreateResponse"];
            };
        };
        /** @description Subscription Fetch response */
        SubscriptionFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubscriptionFetchResponse"];
            };
        };
        /** @description Subscription Disable response */
        SubscriptionDisableSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SubscriptionDisableResponse"];
            };
        };
        /** @description Product Lists response */
        ProductListsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductListsResponse"];
            };
        };
        /** @description Product Create response */
        ProductCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductCreateResponse"];
            };
        };
        /** @description Product Fetch response */
        ProductFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductFetchResponse"];
            };
        };
        /** @description Product Update response */
        ProductUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductUpdateResponse"];
            };
        };
        /** @description Product Delete response */
        ProductDeleteSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductDeleteResponse"];
            };
        };
        /** @description Storefront List response */
        StorefrontListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StorefrontListResponse"];
            };
        };
        /** @description Storefront Create response */
        StorefrontCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StorefrontCreateResponse"];
            };
        };
        /** @description Storefront Fetch response */
        StorefrontFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StorefrontFetchResponse"];
            };
        };
        /** @description Storefront Update response */
        StorefrontUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StorefrontUpdateResponse"];
            };
        };
        /** @description Storefront Delete response */
        StorefrontDeleteSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StorefrontDeleteResponse"];
            };
        };
        /** @description Order List response */
        OrderListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["OrderListResponse"];
            };
        };
        /** @description Order Create response */
        OrderCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["OrderCreateResponse"];
            };
        };
        /** @description Order Fetch response */
        OrderFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["OrderFetchResponse"];
            };
        };
        /** @description Order Fetch Product response */
        OrderFetchProductSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["OrderFetchProductResponse"];
            };
        };
        /** @description Order Validate response */
        OrderValidateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["OrderValidateResponse"];
            };
        };
        /** @description Page List response */
        PageListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageListResponse"];
            };
        };
        /** @description Page Create response */
        PageCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageCreateResponse"];
            };
        };
        /** @description Page Fetch response */
        PageFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageFetchResponse"];
            };
        };
        /** @description Page Update response */
        PageUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageUpdateResponse"];
            };
        };
        /** @description Page Check Slug Availability response */
        PageCheckSlugAvailabilitySuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageCheckSlugAvailabilityResponse"];
            };
        };
        /** @description Page Add Products response */
        PageAddProductsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PageAddProductsResponse"];
            };
        };
        /** @description Payment Request List response */
        PaymentRequestListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestListResponse"];
            };
        };
        /** @description Payment Request Create response */
        PaymentRequestCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestCreateResponse"];
            };
        };
        /** @description Payment Request Update response */
        PaymentRequestUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestUpdateResponse"];
            };
        };
        /** @description Payment Request Verify response */
        PaymentRequestVerifySuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestVerifyResponse"];
            };
        };
        /** @description Payment Request Send Notification response */
        PaymentRequestSendNotificationSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestSendNotificationResponse"];
            };
        };
        /** @description Payment Request Total response */
        PaymentRequestTotalSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestTotalResponse"];
            };
        };
        /** @description Payment Request Finalize response */
        PaymentRequestFinalizeSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestFinalizeResponse"];
            };
        };
        /** @description Payment Request Archive response */
        PaymentRequestArchiveSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentRequestArchiveResponse"];
            };
        };
        /** @description Transfer Recipient List response */
        TransferRecipientListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientListResponse"];
            };
        };
        /** @description Transfer Recipient Create response */
        TransferRecipientCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientCreateResponse"];
            };
        };
        /** @description Transfer Recipient Bulk Create response */
        TransferRecipientBulkCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientBulkCreateResponse"];
            };
        };
        /** @description Transfer Recipient Fetch response */
        TransferRecipientFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientFetchResponse"];
            };
        };
        /** @description Transfer Recipient Update response */
        TransferRecipientUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientUpdateResponse"];
            };
        };
        /** @description Transfer Recipient Delete response */
        TransferRecipientDeleteSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferRecipientDeleteResponse"];
            };
        };
        /** @description Transfer List response */
        TransferListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferListResponse"];
            };
        };
        /** @description Transfer Create response */
        TransferCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferCreateResponse"];
            };
        };
        /** @description Transfer Bulk response */
        TransferBulkSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferBulkResponse"];
            };
        };
        /** @description Transfer Fetch response */
        TransferFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferFetchResponse"];
            };
        };
        /** @description Transfer Verify response */
        TransferVerifySuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferVerifyResponse"];
            };
        };
        /** @description Transfer Resends Otp response */
        TransferResendsOtpSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferResendsOtpResponse"];
            };
        };
        /** @description Transfer Disables Otp response */
        TransferDisablesOtpSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferDisablesOtpResponse"];
            };
        };
        /** @description Transfer Finalize Disables Otp response */
        TransferFinalizeDisablesOtpSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferFinalizeDisablesOtpResponse"];
            };
        };
        /** @description Transfer Enables Otp response */
        TransferEnablesOtpSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TransferEnablesOtpResponse"];
            };
        };
        /** @description Balance Check response */
        BalanceCheckSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BalanceCheckResponse"];
            };
        };
        /** @description Balance Fetch Ledger response */
        BalanceFetchLedgerSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BalanceFetchLedgerResponse"];
            };
        };
        /** @description Charge Create response */
        ChargeCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeCreateResponse"];
            };
        };
        /** @description Charge Submit Pin response */
        ChargeSubmitPinSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeSubmitPinResponse"];
            };
        };
        /** @description Charge Submit Otp response */
        ChargeSubmitOtpSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeSubmitOtpResponse"];
            };
        };
        /** @description Charge Submit Phone response */
        ChargeSubmitPhoneSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeSubmitPhoneResponse"];
            };
        };
        /** @description Charge Submit Birthday response */
        ChargeSubmitBirthdaySuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeSubmitBirthdayResponse"];
            };
        };
        /** @description Charge Check Pending response */
        ChargeCheckPendingSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ChargeCheckPendingResponse"];
            };
        };
        /** @description Bulk Charge List response */
        BulkChargeListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargeListResponse"];
            };
        };
        /** @description Bulk Charge Initiate response */
        BulkChargeInitiateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargeInitiateResponse"];
            };
        };
        /** @description Bulk Charge Fetch response */
        BulkChargeFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargeFetchResponse"];
            };
        };
        /** @description Bulk Charge Fetch Bulk Batch Charges response */
        BulkChargeFetchBulkBatchChargesSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargeFetchBulkBatchChargesResponse"];
            };
        };
        /** @description Bulk Charge Pause response */
        BulkChargePauseSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargePauseResponse"];
            };
        };
        /** @description Bulk Charge Resume response */
        BulkChargeResumeSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BulkChargeResumeResponse"];
            };
        };
        /** @description Refund List response */
        RefundListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["RefundListResponse"];
            };
        };
        /** @description Refund Create response */
        RefundCreateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["RefundCreateResponse"];
            };
        };
        /** @description Refund Fetch response */
        RefundFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["RefundFetchResponse"];
            };
        };
        /** @description Dispute List response */
        DisputeListSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeListResponse"];
            };
        };
        /** @description Dispute Fetch response */
        DisputeFetchSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeFetchResponse"];
            };
        };
        /** @description Dispute Update response */
        DisputeUpdateSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeUpdateResponse"];
            };
        };
        /** @description Dispute Upload U R L response */
        DisputeUploadURLSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeUploadURLResponse"];
            };
        };
        /** @description Dispute Export response */
        DisputeExportSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeExportResponse"];
            };
        };
        /** @description Dispute List Transaction response */
        DisputeListTransactionSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeListTransactionResponse"];
            };
        };
        /** @description Dispute Resolve response */
        DisputeResolveSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeResolveResponse"];
            };
        };
        /** @description Dispute Add Evidence response */
        DisputeAddEvidenceSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DisputeAddEvidenceResponse"];
            };
        };
        /** @description Miscellaneous List Banks response */
        MiscellaneousListBanksSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MiscellaneousListBanksResponse"];
            };
        };
        /** @description Verification Resolve Account Number response */
        VerificationResolveAccountNumberSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VerificationResolveAccountNumberResponse"];
            };
        };
        /** @description Verification Validate Account response */
        VerificationValidateAccountSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VerificationValidateAccountResponse"];
            };
        };
        /** @description Verification Resolve Card B I N response */
        VerificationResolveCardBINSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VerificationResolveCardBINResponse"];
            };
        };
        /** @description Miscellaneous List Countries response */
        MiscellaneousListCountriesSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MiscellaneousListCountriesResponse"];
            };
        };
        /** @description Miscellaneous List States response */
        MiscellaneousListStatesSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MiscellaneousListStatesResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    transaction_initialize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionInitialize"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionInitialize"];
            };
        };
        responses: {
            200: components["responses"]["TransactionInitializeSuccess"];
            400: components["responses"]["TransactionInitializeBadRequestResponse"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The transaction reference to verify */
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionVerifySuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_list: {
        parameters: {
            query?: {
                /** @description A flag to indicate if cursor based pagination should be used */
                use_cursor?: boolean;
                /** @description An alphanumeric value returned for every cursor based retrieval, used to retrieve the next set of data
                 *      */
                next?: string;
                /** @description An alphanumeric value returned for every cursor based retrieval, used to retrieve the previous set of data
                 *      */
                previous?: string;
                /** @description The number of records to fetch per request */
                per_page?: number;
                /** @description Used to indicate the offeset to retrieve data from */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
                /** @description The payment method the customer used to complete the transaction */
                channel?: "card" | "pos" | "bank" | "dedicated_nuban" | "ussd" | "bank_transfer";
                /** @description The terminal ID to filter all transactions from a terminal */
                terminal_id?: string;
                /** @description The customer code to filter all transactions from a customer */
                customer_code?: string;
                /** @description Filter transactions by a certain amount */
                amount?: number;
                /** @description Filter transaction by status */
                status?: "success" | "failed" | "abandoned" | "reversed";
                /** @description The origin of the payment */
                source?: "merchantApi" | "checkout" | "pos" | "virtualTerminal";
                /** @description Filter transaction by subaccount code */
                subaccount_code?: string;
                /** @description Filter transaction by split code */
                split_code?: string;
                /** @description The settlement ID to filter for settled transactions */
                settlement?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the transaction to fetch */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_timeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 3936799950 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionTimelineSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_totals: {
        parameters: {
            query?: {
                /**
                 * @description The start date
                 * @example 2024-06-01T00:00:01Z
                 */
                from?: string;
                /**
                 * @description The end date
                 * @example 2024-06-30T13:36:54Z
                 */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionTotalsSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_download: {
        parameters: {
            query?: {
                /**
                 * @description The start date
                 * @example 2024-06-01T00:00:01Z
                 */
                from?: string;
                /**
                 * @description The end date
                 * @example 2024-06-30T13:36:54Z
                 */
                to?: string;
                /**
                 * @description Filter by the status of the transaction
                 * @example success
                 */
                status?: "success" | "failed" | "abandoned" | "reversed" | "all";
                /**
                 * @description Filter by customer code
                 * @example CUS_eqt26928wowif7z
                 */
                customer?: string;
                /**
                 * @description Filter by subaccount code
                 * @example ACCT_dskvlw3y3dMukmt
                 */
                subaccount_code?: string;
                /**
                 * @description Filter by the settlement ID
                 * @example 5687910
                 */
                settlement?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionExportSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_chargeAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionChargeAuthorization"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionChargeAuthorization"];
            };
        };
        responses: {
            200: components["responses"]["TransactionChargeSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_partialDebit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionPartialDebit"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionPartialDebit"];
            };
        };
        responses: {
            200: components["responses"]["TransactionPartialDebitSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 3936799950 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_session: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 3936799950 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_list: {
        parameters: {
            query?: {
                name?: string;
                active?: string;
                sort_by?: string;
                from?: string;
                to?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SplitListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["SplitCreate"];
            };
        };
        responses: {
            200: components["responses"]["SplitCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SplitFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["SplitUpdate"];
            };
        };
        responses: {
            200: components["responses"]["SplitUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_addSubaccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example application/json */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitSubaccounts"];
                "application/x-www-form-urlencoded": components["schemas"]["SplitSubaccounts"];
            };
        };
        responses: {
            200: components["responses"]["SplitAddUpdateSubaccountSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_removeSubaccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SplitSubaccounts"];
                "application/x-www-form-urlencoded": components["schemas"]["SplitSubaccounts"];
            };
        };
        responses: {
            200: components["responses"]["SplitRemoveSubaccountSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_sendEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example Z0R4orOU */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminalSendEvent"];
                "application/x-www-form-urlencoded": components["schemas"]["TerminalSendEvent"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_fetchEventStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example Z0R4orOU */
                terminal_id: string;
                /** @example 616d721e8c5cd40a0cdd54a6 */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_fetchTerminalStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example Z0R4orOU */
                terminal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TerminalGetStatusSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_list: {
        parameters: {
            query?: {
                next?: string;
                previous?: string;
                per_page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TerminalListsSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terminal_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TerminalGetSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terminal_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminalUpate"];
                "application/x-www-form-urlencoded": components["schemas"]["TerminalUpate"];
            };
        };
        responses: {
            200: components["responses"]["TerminalUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_commission: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminalActivationToggle"];
                "application/x-www-form-urlencoded": components["schemas"]["TerminalActivationToggle"];
            };
        };
        responses: {
            200: components["responses"]["TerminalCommissionDeviceSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    terminal_decommission: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminalActivationToggle"];
                "application/x-www-form-urlencoded": components["schemas"]["TerminalActivationToggle"];
            };
        };
        responses: {
            200: components["responses"]["TerminalDecommissionDeviceSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_list: {
        parameters: {
            query?: {
                use_cursor?: boolean;
                next?: string;
                previous?: string;
                from?: string;
                to?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["CustomerListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerCreate"];
            };
        };
        responses: {
            200: components["responses"]["CustomerCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["CustomerFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerUpdate"];
            };
        };
        responses: {
            200: components["responses"]["CustomerUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_riskAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerRiskAction"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerRiskAction"];
            };
        };
        responses: {
            200: components["responses"]["CustomerWhitelistBlacklistSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_deactivateAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerDeactivateAuthorization"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerDeactivateAuthorization"];
            };
        };
        responses: {
            200: components["responses"]["CustomerDeactivateAuthorizationSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_validate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerValidate"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomerValidate"];
            };
        };
        responses: {
            202: components["responses"]["CustomerValidateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_list: {
        parameters: {
            query?: {
                account_number?: string;
                customer?: string;
                active?: boolean;
                currency?: string;
                provider_slug?: string;
                bank_id?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DedicatedNubanFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DedicatedVirtualAccountCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountCreate"];
            };
        };
        responses: {
            200: components["responses"]["DedicatedNubanCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_assign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DedicatedVirtualAccountAssign"];
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountAssign"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DedicatedNubanFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_deactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DedicatedNubanDeactivateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_requery: {
        parameters: {
            query?: {
                /** @description Virtual account number to requery */
                account_number?: string;
                /** @description The bank's slug in lowercase, without spaces e.g. `wema-bank` */
                provider_slug?: string;
                /** @description The day the transfer was made in `YYYY-MM-DD` format */
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_addSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DedicatedVirtualAccountSplit"];
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountSplit"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_removeSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DedicatedVirtualAccountSplit"];
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountSplit"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_availableProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applePay_listDomain: {
        parameters: {
            query?: {
                use_cursor?: boolean;
                next?: string;
                previous?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applePay_registerDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplePayParam"];
                "application/x-www-form-urlencoded": components["schemas"]["ApplePayParam"];
            };
        };
        responses: {
            200: components["responses"]["ApplePayOkResponse"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applePay_unregisterDomain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplePayParam"];
                "application/x-www-form-urlencoded": components["schemas"]["ApplePayParam"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SubaccountListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubaccountCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["SubaccountCreate"];
            };
        };
        responses: {
            200: components["responses"]["SubaccountCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SubaccountFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubaccountUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["SubaccountUpdate"];
            };
        };
        responses: {
            200: components["responses"]["SubaccountUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Specify interval of the plan */
                interval?: string;
                /** @description The amount on the plans to retrieve */
                amount?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PlanListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PlanCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["PlanCreate"];
            };
        };
        responses: {
            200: components["responses"]["PlanCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PlanFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PlanUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PlanUpdate"];
            };
        };
        responses: {
            200: components["responses"]["PlanUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Plan ID */
                plan?: string;
                /** @description Customer ID */
                customer?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SubscriptionListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionCreate"];
            };
        };
        responses: {
            200: components["responses"]["SubscriptionCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SubscriptionFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_disable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionToggle"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionToggle"];
            };
        };
        responses: {
            200: components["responses"]["SubscriptionDisableSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_enable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionToggle"];
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionToggle"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_manageLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_manageEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_list: {
        parameters: {
            query?: {
                perPage?: number;
                page?: number;
                active?: boolean;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ProductListsSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductCreate"];
            };
        };
        responses: {
            201: components["responses"]["ProductCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ProductFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["ProductUpdate"];
            };
        };
        responses: {
            200: components["responses"]["ProductUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ProductDeleteSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_list: {
        parameters: {
            query?: {
                perPage?: number;
                page?: number;
                status?: "active" | "inactive";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["StorefrontListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StorefrontCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["StorefrontCreate"];
            };
        };
        responses: {
            200: components["responses"]["StorefrontCreateSuccess"];
            400: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["StorefrontFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StorefrontUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["StorefrontUpdate"];
            };
        };
        responses: {
            200: components["responses"]["StorefrontUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["StorefrontDeleteSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_verifySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_fetchOrders: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example Z0R4orOU */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_listProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_addProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StorefrontAddProducts"];
                "application/x-www-form-urlencoded": components["schemas"]["StorefrontAddProducts"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_publish: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storefront_duplicate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    order_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["OrderListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    order_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrderCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderCreate"];
            };
        };
        responses: {
            200: components["responses"]["OrderCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    order_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["OrderFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    order_fetchProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["OrderFetchProductSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    order_validatePayForMe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["OrderValidateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PageListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PageCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["PageCreate"];
            };
        };
        responses: {
            200: components["responses"]["PageCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PageFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PageUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PageUpdate"];
            };
        };
        responses: {
            200: components["responses"]["PageUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_checkSlugAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PageCheckSlugAvailabilitySuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_addProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PageProduct"];
                "application/x-www-form-urlencoded": components["schemas"]["PageProduct"];
            };
        };
        responses: {
            200: components["responses"]["PageAddProductsSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Customer ID */
                customer?: string;
                /** @description Invoice status to filter */
                status?: string;
                /** @description If your integration supports more than one currency, choose the one to filter */
                currency?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentRequestCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequestCreate"];
            };
        };
        responses: {
            200: components["responses"]["PaymentRequestCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentRequestUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequestUpdate"];
            };
        };
        responses: {
            200: components["responses"]["PaymentRequestUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestVerifySuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_notify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestSendNotificationSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_totals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestTotalSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_finalize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestFinalizeSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PaymentRequestArchiveSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    settlements_fetch: {
        parameters: {
            query?: {
                /** @example 50 */
                perPage?: number;
                /** @example 2 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    settlements_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferRecipientListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferRecipientCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientCreate"];
            };
        };
        responses: {
            201: components["responses"]["TransferRecipientCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_bulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferRecipientBulk"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientBulk"];
            };
        };
        responses: {
            200: components["responses"]["TransferRecipientBulkCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferRecipientFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferRecipientUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientUpdate"];
            };
        };
        responses: {
            200: components["responses"]["TransferRecipientUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferRecipientDeleteSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_initiate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferInitiate"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferInitiate"];
            };
        };
        responses: {
            200: components["responses"]["TransferCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_finalize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferFinalize"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferFinalize"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_bulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferBulk"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferBulk"];
            };
        };
        responses: {
            200: components["responses"]["TransferBulkSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferVerifySuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_download: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_resendOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferResendOTP"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferResendOTP"];
            };
        };
        responses: {
            200: components["responses"]["TransferResendsOtpSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_disableOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferDisablesOtpSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_disableOtpFinalize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferFinalizeDisableOTP"];
                "application/x-www-form-urlencoded": components["schemas"]["TransferFinalizeDisableOTP"];
            };
        };
        responses: {
            200: components["responses"]["TransferFinalizeDisablesOtpSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_enableOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransferEnablesOtpSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    balance_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BalanceCheckSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    balance_ledger: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BalanceFetchLedgerSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeCreate"] & {
                    bank?: components["schemas"]["Bank"];
                } & {
                    mobile_money?: components["schemas"]["MobileMoney"];
                } & {
                    ussd?: components["schemas"]["USSD"];
                } & {
                    eft?: components["schemas"]["EFT"];
                };
                "application/x-www-form-urlencoded": components["schemas"]["ChargeCreate"] & {
                    bank?: components["schemas"]["Bank"];
                } & {
                    mobile_money?: components["schemas"]["MobileMoney"];
                } & {
                    ussd?: components["schemas"]["USSD"];
                } & {
                    eft?: components["schemas"]["EFT"];
                };
            };
        };
        responses: {
            200: components["responses"]["ChargeCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitPin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeSubmitPin"];
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitPin"];
            };
        };
        responses: {
            200: components["responses"]["ChargeSubmitPinSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeSubmitOTP"];
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitOTP"];
            };
        };
        responses: {
            200: components["responses"]["ChargeSubmitOtpSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitPhone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeSubmitPhone"];
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitPhone"];
            };
        };
        responses: {
            200: components["responses"]["ChargeSubmitPhoneSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitBirthday: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeSubmitBirthday"];
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitBirthday"];
            };
        };
        responses: {
            200: components["responses"]["ChargeSubmitBirthdaySuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeSubmitAddress"];
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitAddress"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_check: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ChargeCheckPendingSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BulkChargeListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_initiate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** charges */
                    charges?: Record<string, never>;
                }[];
                "application/x-www-form-urlencoded": {
                    charges?: Record<string, never>;
                }[];
            };
        };
        responses: {
            200: components["responses"]["BulkChargeInitiateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BulkChargeFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_charges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BulkChargeFetchBulkBatchChargesSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_pause: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BulkChargePauseSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_resume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["BulkChargeResumeSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    integration_fetchPaymentSessionTimeout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    integration_updatePaymentSessionTimeout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentSession"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["RefundListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["RefundCreate"];
            };
        };
        responses: {
            200: components["responses"]["RefundCreateSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["RefundFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Dispute Status. Acceptable values are awaiting-merchant-feedback, awaiting-bank-feedback, pending, resolved */
                status?: string;
                /** @description Transaction ID */
                transaction?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DisputeListSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DisputeFetchSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DisputeUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["DisputeUpdate"];
            };
        };
        responses: {
            200: components["responses"]["DisputeUpdateSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_uploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DisputeUploadURLSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_download: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DisputeExportSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DisputeListTransactionSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_resolve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DisputeResolve"];
                "application/x-www-form-urlencoded": components["schemas"]["DisputeResolve"];
            };
        };
        responses: {
            200: components["responses"]["DisputeResolveSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_evidence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DisputeEvidence"];
                "application/x-www-form-urlencoded": components["schemas"]["DisputeEvidence"];
            };
        };
        responses: {
            200: components["responses"]["DisputeAddEvidenceSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bank_list: {
        parameters: {
            query?: {
                country?: string;
                pay_with_bank_transfer?: boolean;
                use_cursor?: boolean;
                perPage?: number;
                next?: string;
                previous?: string;
                gateway?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MiscellaneousListBanksSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bank_resolveAccountNumber: {
        parameters: {
            query?: {
                /** @example 22728151 */
                account_number?: number;
                /** @example 63 */
                bank_code?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["VerificationResolveAccountNumberSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bank_validateAccountNumber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BankValidateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BankValidateRequest"];
            };
        };
        responses: {
            200: components["responses"]["VerificationValidateAccountSuccess"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    miscellaneous_resolveCardBin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["VerificationResolveCardBINSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    miscellaneous_listCountries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MiscellaneousListCountriesSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    miscellaneous_avs: {
        parameters: {
            query?: {
                type?: string;
                country?: string;
                currency?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["MiscellaneousListStatesSuccess"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
